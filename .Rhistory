ggplot(dat, aes(x = Pos, y = tube.l, group = plantID, color = as.factor(plantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (Tube Length)",
x = "Flower Position in Array",
y = "Tube Length",
color = "Plant ID")
#NB: pathway is for MK's home computer
dat<- read.csv("C:/Users/mason/Dropbox/git/students/Oliver Noseworthy/Data/data2.csv")
head(dat)
attach(dat)
# Load necessary packages
library(mgcv)
library(ggplot2)
library(dplyr)
# Fit B-splines using Generalized Additive Models (GAM) for tube length
model_tube <- gam(tube.l ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re") + s(Branch, bs = "re"),
data = dat, method = "REML")
# Fit B-splines for flower diameter
model_flw <- gam(flw.d ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re") + s(Branch, bs = "re"),
data = dat, method = "REML")
# Generate prediction data
new_data <- expand.grid(Pos = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(dat$plantID),
Branch = unique(dat$Branch))
new_data$PredictedTube <- predict(model_tube, new_data, exclude = c("s(plantID)", "s(Branch)"))
new_data$PredictedFlw <- predict(model_flw, new_data, exclude = c("s(plantID)", "s(Branch)"))
# Plot: Mean B-Spline Fit for Tube Length
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = Pos, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
geom_point(data = dat, aes(x = Pos, y = flw.d), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Individual fits by plant for tube length
ggplot(dat, aes(x = Pos, y = tube.l, group = plantID, color = as.factor(plantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (Tube Length)",
x = "Flower Position in Array",
y = "Tube Length",
color = "Plant ID")
# Plot: Mean B-Spline Fit for Tube Length
p1 <- ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = PosArray, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 8), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 20), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 3), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 4), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = knots), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
PredictedTube
head(new_data)
summary(model_tube)
# Fit B-splines using Generalized Additive Models (GAM) for tube length
model_tube <- gam(tube.l ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re"),
data = dat, method = "REML")
summary(model_tube)
# Fit B-splines for flower diameter
model_flw <- gam(flw.d ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re"),
data = dat, method = "REML")
# Generate prediction data
new_data <- expand.grid(Pos = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(dat$plantID),
Branch = unique(dat$Branch))
# Generate prediction data
new_data <- expand.grid(Pos = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(dat$plantID))
new_data$PredictedTube <- predict(model_tube, new_data, exclude = c("s(plantID)", "s(Branch)"))
new_data$PredictedFlw <- predict(model_flw, new_data, exclude = c("s(plantID)", "s(Branch)"))
# Plot: Mean B-Spline Fit for Tube Length
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = Pos, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
geom_point(data = dat, aes(x = Pos, y = flw.d), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Individual fits by plant for tube length
ggplot(dat, aes(x = Pos, y = tube.l, group = plantID, color = as.factor(plantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (Tube Length)",
x = "Flower Position in Array",
y = "Tube Length",
color = "Plant ID")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
#home computer
setwd("C:/Users/mason/Dropbox/git/Vicia/")
# Load required packages
library(refund)
library(dplyr)
library(tidyr)
# Read data
data <- read.csv("/mnt/data/vicia_final_data.csv")
# Filter complete cases for required variables
data <- data %>%
filter(!is.na(FL), !is.na(FD), !is.na(B), !is.na(Seeds), !is.na(PosSeq))
library(dplyr)
library(tidyr)
# Calculate total number of flowers per plant
data <- data %>%
group_by(PlantID) %>%
mutate(n_flw = n()) %>%
ungroup()
# Function to reshape flower traits into wide format per plant
reshape_for_lfvd <- function(trait_name) {
data %>%
select(PlantID, PosSeq, !!sym(trait_name)) %>%
arrange(PlantID, PosSeq) %>%
group_by(PlantID) %>%
mutate(pos_scaled = PosSeq - min(PosSeq)) %>%
ungroup() %>%
pivot_wider(names_from = pos_scaled, values_from = !!sym(trait_name)) %>%
column_to_rownames("PlantID") %>%
as.matrix()
}
# Prepare matrices for each trait
FL_mat <- reshape_for_lfvd("FL")
FD_mat <- reshape_for_lfvd("FD")
B_mat  <- reshape_for_lfvd("B")
# Read data
data <- read.csv("/mnt/data/vicia_final_data.csv")
# Filter complete cases for required variables
data <- data %>%
filter(!is.na(FL), !is.na(FD), !is.na(B), !is.na(Seeds), !is.na(PosSeq))
# Read data
data <- read.csv("vicia_final_data.csv")
# Filter complete cases for required variables
data <- data %>%
filter(!is.na(FL), !is.na(FD), !is.na(B), !is.na(Seeds), !is.na(PosSeq))
names(data)
# Filter complete cases for required variables
data <- data %>%
filter(!is.na(FL), !is.na(FD), !is.na(B), !is.na(seeds), !is.na(PosSeq))
# Calculate total number of flowers per plant
data <- data %>%
group_by(PlantID) %>%
mutate(n_flw = n()) %>%
ungroup()
# Function to reshape flower traits into wide format per plant
reshape_for_lfvd <- function(trait_name) {
data %>%
select(PlantID, PosSeq, !!sym(trait_name)) %>%
arrange(PlantID, PosSeq) %>%
group_by(PlantID) %>%
mutate(pos_scaled = PosSeq - min(PosSeq)) %>%
ungroup() %>%
pivot_wider(names_from = pos_scaled, values_from = !!sym(trait_name)) %>%
column_to_rownames("PlantID") %>%
as.matrix()
}
# Prepare matrices for each trait
FL_mat <- reshape_for_lfvd("FL")
library(tibble)
# Prepare matrices for each trait
FL_mat <- reshape_for_lfvd("FL")
FD_mat <- reshape_for_lfvd("FD")
B_mat  <- reshape_for_lfvd("B")
# Match Seeds and covariates to plant-level data
# Averaging seeds per plant (or could be total, depending on biological meaning)
plant_data <- data %>%
group_by(PlantID) %>%
summarize(Seeds = mean(Seeds, na.rm = TRUE),
n_flw = first(n_flw)) %>%
ungroup()
# Match Seeds and covariates to plant-level data
# Averaging seeds per plant (or could be total, depending on biological meaning)
plant_data <- data %>%
group_by(PlantID) %>%
summarize(seeds = mean(seeds, na.rm = TRUE),
n_flw = first(n_flw)) %>%
ungroup()
# Fit functional regression model using lf.vd() for each trait
fit <- pfr(Seeds ~
lf.vd(FL_mat, argvals = NULL) +
lf.vd(FD_mat, argvals = NULL) +
lf.vd(B_mat,  argvals = NULL) +
n_flw,
data = plant_data)
# Fit functional regression model using lf.vd() for each trait
fit <- pfr(seeds ~
lf.vd(FL_mat, argvals = NULL) +
lf.vd(FD_mat, argvals = NULL) +
lf.vd(B_mat,  argvals = NULL) +
n_flw,
data = plant_data)
FL_mat
# Prepare matrices for each trait
FL_mat <- reshape_for_lfvd("FL")
# Read data
dat <- read.csv("vicia_final_data.csv")
dat$PlantID<- as.factor(dat$PlantID)
dat$Branch<- as.factor(dat$Branch)
b<- glm(B ~ Branch, data = dat)
summary(b)
var(b)
first<- subset(dat2, Pos==1)
first.mean<- aggregate(first$B, by=list(first$Branch), mean)
#maximum fruit set per plant
seed<- aggregate(dat$seeds, by=list(dat$PlantID), sum)
seed$Group.1<- NULL
#calcualte total flower number
flw.no<- aggregate(dat$PosSeq, by=list(dat$PlantID), max)
flw.no$Group.1<- NULL
bno<- dat[c("PlantID", "Branch")]
bno$Branch<- as.numeric(bno$Branch)
branch.no<- aggregate(bno$Branch, by=list(bno$PlantID), max)
branch.no$Group.1<- NULL
######
# Prepare functional predictors
B<- dat[c("PlantID","PosSeq", "B")]
FL<- dat[c("PlantID","PosSeq", "FL")]
FD<- dat[c("PlantID","PosSeq", "FD")]
# Reshape into long-format matrix
long<- reshape(B, timevar="PosSeq", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
#rename
banner<-long
# Reshape into long-format matrix
long<- reshape(FL, timevar="PosSeq", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
#rename
FL<-long
# Reshape into long-format matrix
long<- reshape(FD, timevar="PosSeq", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
#rename
FD<-long
# set up variable domain:
# "seqpos" -> position of flower in continuous sequence (across all branches)
seqpos<- aggregate(B$PosSeq, by=list(B$PlantID), max)
seqpos$Group.1<- NULL
seqpos<- as.matrix(seqpos)
seqpos<- as.vector(seqpos)
#load Refund - June 4: after chat with Lawrence: check Fig. 4 vd.
library(refund)
fit.1<- pfr(seed ~ lf.vd(banner, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no),family='ziP')
summary(fit.1)
long<- reshape(B, timevar="PosSeq", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
#rename
B<-long
fit.1<- pfr(seed ~ lf.vd(B, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no),family='ziP')
fit.1<- pfr(seed ~ lf.vd(B, vd=unlist(flw.no) + lf.vd(FL, vd=flw.no), transform='standardized')
+ unlist(flw.no),family='ziP')
fit.1<- pfr(seed ~ lf.vd(B, vd=unlist(flw.no) , transform='standardized') + lf.vd(FL, vd=flw.no)
+ unlist(flw.no),family='ziP')
fit.1<- pfr(seed ~ lf.vd(B, vd=unlist(flw.no) , transform='standardized')
+ unlist(flw.no),family='ziP')
fit.1<- pfr(seed ~ lf.vd(B, vd=unlist(flw.no) , transform='standardized')
+ unlist(flw.no),family='ziP')
fit.2<- pfr(seed ~ lf.vd(FL, vd=unlist(flw.no) , transform='standardized')
+ unlist(flw.no),family='ziP')
fit.3<- pfr(seed ~ lf.vd(FD, vd=unlist(flw.no) , transform='standardized')
+ unlist(flw.no),family='ziP')
fit.all <- pfr(seed ~
lf.vd(FL, vd = unlist(flw.no), transform = 'standardized') +
lf.vd(FD, vd = unlist(flw.no), transform = 'standardized') +
lf.vd(B,  vd = unlist(flw.no), transform = 'standardized') +
unlist(flw.no),
family = "ziP")
summary(fit.all)
########### check dists
# Full formula (same for all models)
model_formula <- seed ~
lf.vd(FL, vd = unlist(flw.no), transform = "standardized") +
lf.vd(FD, vd = unlist(flw.no), transform = "standardized") +
lf.vd(B,  vd = unlist(flw.no), transform = "standardized") +
unlist(flw.no)
# Fit models under different families
fit_pois  <- pfr(model_formula, family = "poisson")
fit_nb    <- pfr(model_formula, family = "negbin")
fit_zip   <- pfr(model_formula, family = "ziP")
fit_zinb  <- pfr(model_formula, family = "ziNB")
# Compare AICs
aic_values <- c(
poisson = AIC(fit_pois),
negbin  = AIC(fit_nb),
ziP     = AIC(fit_zip),
ziNB    = AIC(fit_zinb)
)
# Print and sort results
print(sort(aic_values))
library(MASS)
# Estimate theta from a basic negative binomial GLM
nb_glm <- glm.nb(seed ~ 1, data = your_data)  # replace with appropriate data frame
# Estimate theta from a basic negative binomial GLM
nb_glm <- glm.nb(seed ~ 1, data = dat)  # replace with appropriate data frame
# Estimate theta from a basic negative binomial GLM
nb_glm <- glm.nb(seeds ~ 1, data = dat)  # replace with appropriate data frame
theta_est <- nb_glm$theta
# Fit models under different families
fit_pois  <- pfr(model_formula, family = "poisson")
fit_nb <- pfr(model_formula, family = negbin(theta = theta_est))
fit_nb <- pfr(model_formula, family = "negbin", (theta = theta_est))
theta_est
fit_nb <- pfr(model_formula, family = "negbin", theta = theta_est))
fit_nb <- pfr(model_formula, family = "negbin", theta = theta_est)
fit_nb <- pfr(model_formula, family = "negbin" (theta = theta_est))
fit_nb <- pfr(model_formula, family = "negbin" ,(theta = theta_est))
fit_nb <- pfr(model_formula, family = "negbin" ,(theta_est))
fit_nb <- pfr(model_formula, family = "negbin" ,(theta=11740.83))
#output of results
fit<- coef(fit.all)   #Note: are these transformed?
head(fit)
#make absolute frstart date
fit$x<- fit$FL.arg * fit$FL.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$banner.arg, fit$value, type="l", main="relative")
plot(fit$FL.arg, fit$value, type="l", main="relative")
fit.all <- pfr(seed ~
lf.vd(B, vd = unlist(flw.no), transform = 'standardized') +
lf.vd(FD, vd = unlist(flw.no), transform = 'standardized') +
lf.vd(FL,  vd = unlist(flw.no), transform = 'standardized') +
unlist(flw.no),
family = "ziP")
summary(fit.all)
########### check dists
# Full formula (same for all models)
model_formula <- seed ~
lf.vd(FL, vd = unlist(flw.no), transform = "standardized") +
lf.vd(FD, vd = unlist(flw.no), transform = "standardized") +
lf.vd(B,  vd = unlist(flw.no), transform = "standardized") +
unlist(flw.no)
#output of results
fit<- coef(fit.all)   #Note: are these transformed?
head(fit)
#make absolute frstart date
fit$x<- fit$B.arg * fit$B.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$B.arg, fit$value, type="l", main="relative")
########### check dists
# Full formula (same for all models)
model_formula <- seed ~
lf.vd(FL, vd = unlist(flw.no), transform = "standardized") +
lf.vd(FD, vd = unlist(flw.no), transform = "standardized") +
lf.vd(B,  vd = unlist(flw.no), transform = "standardized") +
unlist(log(flw.no))
#output of results
fit<- coef(fit.all)   #Note: are these transformed?
summary(model_formula)
lf.vd(B, vd = unlist(flw.no), transform = 'standardized') +
fit.all <- pfr(seed ~
lf.vd(B, vd = unlist(flw.no), transform = 'standardized') +
lf.vd(FD, vd = unlist(flw.no), transform = 'standardized') +
lf.vd(FL,  vd = unlist(flw.no), transform = 'standardized') +
unlist(log(flw.no)),
family = "ziP")
fit.all <- pfr(seed ~
lf.vd(B, vd = unlist(flw.no), transform = 'standardized') +
lf.vd(FD, vd = unlist(flw.no), transform = 'standardized') +
lf.vd(FL,  vd = unlist(flw.no), transform = 'standardized') +
unlist(flw.no),
family = "ziP")
summary(fit.all)
fit.all <- pfr(seed ~
lf.vd(B, vd = unlist(flw.no), transform = 'standardized') +
lf.vd(FD, vd = unlist(flw.no), transform = 'standardized') +
lf.vd(FL,  vd = unlist(flw.no), transform = 'standardized') +
unlist(log(flw.no)),
family = "ziP")
summary(fit.all)
#output of results
fit<- coef(fit.all)   #Note: are these transformed?
#make absolute frstart date
fit$x<- fit$B.arg * fit$B.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$B.arg, fit$value, type="l", main="relative")
fit.all <- pfr(seed ~
lf.vd(B, vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
lf.vd(FD, vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
lf.vd(FL,  vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
unlist(log(flw.no)),
family = "ziP")
summary(fit.all)
#output of results
fit<- coef(fit.all)   #Note: are these transformed?
#make absolute frstart date
fit$x<- fit$B.arg * fit$B.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$B.arg, fit$value, type="l", main="relative")
fit.all <- pfr(seed ~
lf.vd(B, vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
lf.vd(FD, vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
lf.vd(FL,  vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
unlist(log(flw.no)),
family = "Poisson")
fit.all <- pfr(seed ~
lf.vd(B, vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
lf.vd(FD, vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
lf.vd(FL,  vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
unlist(log(flw.no)),
family = "Poi")
fit.all <- pfr(seed ~
lf.vd(B, vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
lf.vd(FD, vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
lf.vd(FL,  vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
unlist(log(flw.no)),
family = "negbin")
?family
fit.all <- pfr(seed ~
lf.vd(B, vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
lf.vd(FD, vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
lf.vd(FL,  vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
unlist(log(flw.no)),
family = "negbin", data=dat)
fit.all <- pfr(seed ~
lf.vd(B, vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
lf.vd(FD, vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
lf.vd(FL,  vd = unlist(flw.no), basistype = "te", transform = 'standardized') +
unlist(log(flw.no)),
family = "negbin", theta = 2)
