# Import paternity analsyis results
pat<- read.csv("C:/Users/Mason Kulbaba/Dropbox/git/delphinium_mating_system/best_config.txt")
dat<- read.csv("C:/Users/mkulbaba/Dropbox/Teaching/2020/BIOL2455/lab/assignments/leaf.csv")
head(dat)
?anova
?glm
fit<- glm(Day33 ~ Treatment, data=dat)
summary(fit)
fit<- anova(Day33 ~ Treatment, data=dat)
?anova
anova(fit)
fit
fit<- lm(Day33 ~ Treatment, data=dat)
summary(fit)
?emmeans
library(emmeans)
install.packages("emmeans")
library(emmeans)
emmeans(fit,"Treatment", type="response")
pairs(fit,"Treatment", type="response")
test(fit,"Treatment", type="response")
pairs(emmeans(fit,"Treatment", type="response"))
test(emmeans((fit,"Treatment", type="response"))
test(emmeans((fit,"Treatment", type="response"))
test(emmeans((fit, type="response"))
summary(fit)
head(dat)
fit<- glm(Day33 ~ Treatment + Replicate, data=dat)
summary(fit)
library(emmeans)
emmeans(fit,"Treatment", type="response")
pairs(emmeans(fit,"Treatment", type="response"))
pairs(emmeans(fit,"Treatment" "Replicate", type="response"))
pairs(emmeans(fit,"Treatment", "Replicate", type="response"))
fit<- glm(Day33 ~ Treatment, data=dat)
summary(fit)
library(emmeans)
emmeans(fit,"Treatment", type="response")
plot(emmeans(fit,"Treatment", type="response"))
install.packages("ggplot2")
plot(emmeans(fit,"Treatment", type="response"))
emmeans(fit,"Treatment", type="response")
plot(emmeans(fit,"Treatment", type="response"))
m<-(emmeans(fit,"Treatment", type="response"))
m
plot(m)
summary(fit)
fit<- lm(Day33 ~ Treatment, data=dat)
summary(fit)
dat<- read.csv("C:/Users/mkulbaba/Dropbox/Teaching/2020/BIOL2455/lab/assignments/leaf2.csv")
head(dat)
fit<- lm(Day36 ~ Treatment, data=dat)
summary(fit)
emmeans(fit,"Treatment", type="response")
library(emmeans)
emmeans(fit,"Treatment", type="response")
dat<- read.csv("C:/Users/Mason Kulbaba/Dropbox/git/geum-aster/final_data.csv")
dat<-read.csv("final_data.csv")
setwd("C:/Users/Mason Kulbaba/Dropbox/git/geum-aster/")
dat<- read.csv("C:/Users/Mason Kulbaba/Dropbox/git/geum-aster/final_data.csv")
dat<- read.csv("C:/Users/mkulbaba/Dropbox/git/geum-aster/final_data.csv")
library(MASS)
library(lme4)
install.packages("lme4")
library(lme4)
#subset by region
dat.gla<- subset(dat, Region=="GL_alvar")
dat.mba<- subset(dat, Region=="MB_alvar")
dat.pr<- subset(dat, Region=="Prairie")
#black as factor
dat.gla$Block.ID<- as.factor(dat.gla$Block.ID)
dat.mba$Block.ID<- as.factor(dat.mba$Block.ID)
dat.pr$Block.ID<- as.factor(dat.pr$Block.ID)
gla_germ<- glmer(Germination.Y.N ~ Block.ID +Population + (1|Family.Unique)
+ Block.ID : (1|Family.Unique), family='binomial',
data=dat.gla,
control=glmerControl(check.conv.grad     = .makeCC("warning", tol = 1e-1, relTol = NULL),
optCtrl=list(maxfun=2e5)))
summary(gla_germ)
#extract variance components
print(VarCorr(gla_germ), comp=c("Variance", "Std.Dev."))
#calcualte residual variance
var(resid(gla_germ))
dat<- read.csv("C:/Users/mkulbaba/Dropbox/git/geum-aster/final_data.csv")
library(MASS)
library(lme4)
#subset by region
dat.gla<- subset(dat, Region=="GL_alvar")
dat.mba<- subset(dat, Region=="MB_alvar")
dat.pr<- subset(dat, Region=="Prairie")
#black as factor
dat.gla$Block.ID<- as.factor(dat.gla$Block.ID)
dat.mba$Block.ID<- as.factor(dat.mba$Block.ID)
dat.pr$Block.ID<- as.factor(dat.pr$Block.ID)
gla_germ<- glmer(Germination.Y.N ~ Block.ID +Population + (1|Family.Unique)
+ Block.ID : (1|Family.Unique), family='binomial',
data=dat.gla,
control=glmerControl(check.conv.grad     = .makeCC("warning", tol = 1e-1, relTol = NULL),
optCtrl=list(maxfun=2e5)))
summary(gla_germ)
nrow(dat.gla)
summary(gla_germ)
#extract variance components
print(VarCorr(gla_germ), comp=c("Variance", "Std.Dev."))
0.71101 /1312
?glmer
vcov(x)
vcov(gla_germ)
#extract variance components
print(VarCorr(gla_germ), comp=c("Variance", "Std.Dev."))
sqrt(0.50553)
dat<- read.csv("C:/Users/mkulbaba/Dropbox/git/Poplar/ids.csv")
head(dat)
dim(dat)
?sample
block.1<- sample(dat, 47, replace = FALSE)
block.1<- sample(dat, replace = FALSE)
dim(block.1)
head(block.1)
head(dat)
block.1<- randomize(dat)
block.1<- sample(dat)
block.1
block.1<- sample(dat)
block.1
dat<-as.vector(dat)
block.1<- sample(dat)
block.1
block.1<- sample(dat, size = 47)
length(dat)
dat
class(dat)
dat<-as.vector(dat)
class(dat)
dat<-as.matrix(dat)
class(dat)
head(dadt)
dat
block.1<- sample(dat, size = 47)
block.1
dim(dat)
dim(block.1)
length(block.1)
b1<-as.data.frame(block.1)
b1
block.2<- sample(dat, size=47)
block.2
b2<-as.data.frame(block.2)
blocks<- cbind(b1, b2)
blocks
write.table(blocks, "blocks.csv", sep=",", quote = F, row.names = F)
write.table(blocks, "C:/Users/mkulbaba/Dropbox/git/Poplar/blocks.csv", sep=",", quote = F, row.names = F)
#Fit a simple linear regression model.
mod.fit <- lm(y1 ~ x1, data = anscombe)
#Plot the data and draw a line through it.
plot(anscombe$x1, anscombe$y1)
#Fit a simple linear regression model.
mod.fit <- lm(y1 ~ x1, data = anscombe, x.lab="Fertilizer consumption (kg/hectare)")
#Plot the data and draw a line through it.
plot(anscombe$x1, anscombe$y1,x.lab="Fertilizer consumption (kg/hectare)")
#Plot the data and draw a line through it.
plot(anscombe$x1, anscombe$y1,xlab="Fertilizer consumption (kg/hectare)")
#Plot the data and draw a line through it.
plot(anscombe$x1, anscombe$y1,xlab="Fertilizer consumption (kg/hectare)")
, ylab="Cereal yield (100Kg/hectare)")
#Plot the data and draw a line through it.
plot(anscombe$x1, anscombe$y1,xlab="Fertilizer consumption (kg/hectare)"
, ylab="Cereal yield (100Kg/hectare)")
?plot
#Plot the data and draw a line through it.
plot(anscombe$x1, anscombe$y1,xlab="Fertilizer consumption (kg/hectare)"
, ylab="Cereal yield (100Kg/hectare)", xlim=(2,11))
#Plot the data and draw a line through it.
plot(anscombe$x1, anscombe$y1,xlab="Fertilizer consumption (kg/hectare)"
, ylab="Cereal yield (100Kg/hectare)", xlim=(11,2))
abline(mod.fit)
#Look at the model output.
summary(mod.fit)
head(anscombe)
dim(anscombe)
#Plot the data and draw a line through it.
plot(anscombe$x3, anscombe$x3,xlab="Fertilizer consumption (kg/hectare)"
, ylab="Cereal yield (100Kg/hectare)")
data(cars)
head(cars)
plot(speed, dist, data=cars)
plot(cars$speed, cars$dist, data=cars)
data(cars)
head(cars)
lm<- lm(cars$speed ~ cars$dist)
summary(lm)
?corr
?cor
?cor.test
cor.test(cars$speed, cars$dist)
?reg
data(cars)
head(cars)
hist(cars$speed)
hist(cars)
hist(cars$dist)
plot(cars$dist, cars$speed)
abline(lm)
#
lm<- lm(cars$speed ~ cars$dist)
abline(lm)
data(cars)
head(cars)
var(cars$speed)
sd(cars$speed)
sqrt(27.95918)
r
sd(cars$speed) = sqrt(var(cars$speed))
sd(cars$speed) == sqrt(var(cars$speed))
data(cars)
head(cars)
mean(cars$speed)
hist(cars$speed)
plot(density(cars$speed))
den<- density(cars$speed)
head(den)
levels(den)
names(den)
den$x
den$y
#Fit a simple linear regression model.
mod.fit <- lm(y1 ~ x1, data = anscombe)
#Look at the model output.
summary(mod.fit)
5 + 5
10-5
5 + 5
10 - 5
15 -5
#log base ten
log10(10)
sin(2*pi)
rm(list =ls())
data(mtcars)
mtcars
rm(list =ls())
data(iris)
iris
head(iris)
dim(iris)
#check "dimensions" of dataframe 'iris'
dim(iris)
#view
head(iris)
#clear R history
rm(list =ls())
data("PlantGrowth")
dim(PlantGrowth)
pg<- PlantGrowth
head(pg)
levels(pg$group)
plot(pg$group, pg$weight)
plot(pg$group, pg$weight)
#clear R history
rm(list =ls())
#load iris data - this iwll be replaced wity YOUR OWN data eventually
data(iris)
#view entire iris dataset - 150 rows and 5 columns
iris
#check "dimensions" of dataframe 'iris'
dim(iris)
#view first few rows of dataframe 'iris'
head(iris)
plot(iris$Sepal.Length, iris$Sepal.Width)
# Welcome to R - February 11, 2021
# NOTE: all code will be archived on blackboard for your repurposing
# clear R history
rm(list =ls())
# Load iris data - this will be replaced wity YOUR OWN data eventually
data(iris)
# View entire iris dataset - 150 rows and 5 columns
iris
# Check "dimensions" of dataframe 'iris'
dim(iris)
# View first few rows of dataframe 'iris'
head(iris)
plot(Sepal.Length, Sepal.Width, pch=Species, data=iris)
plot(iris$Sepal.Length, iris$Sepal.Width, pch=iris$Species)
plot(iris$Sepal.Length, iris$Sepal.Width, pch=as.factor(iris$Species))
plot(iris$Sepal.Length, iris$Sepal.Width, pch=as.numeric(iris$Species))
plot(iris$Sepal.Length, iris$Petal.Width, pch=as.numeric(iris$Species))
View(dat)
dat<- seq(10)
dat
warning()
warnings()
2 + 3
data<- c(2, 3, 4, 5, 6)
data
data2<- data * 2
data2
library(refund)
citation("refund")
#work laptop
setwd("C:/Users/mkulbaba/Dropbox/git/Vicia")
dat<- read.csv("vicia_final_data.csv")
head(dat)
dat2<- dat[!is.na(dat$B), ]
dat2$PlantID<- as.factor(dat2$PlantID)
dat2$Branch<- as.factor(dat2$Branch)
dat2$Pos<- as.factor(dat2$Pos)
dat2$PosSeq<- as.factor(dat2$PosSeq)
head(dat2)
b<- subset(dat2, Branch < 6)
?subset
b<- subset(dat2, as.numeric(Branch) < 6)
head(b)
summary(b$Branch)
b<- droplevels(b$Branch)
summary(b$Branch)
head(b)
b<- subset(dat2, as.numeric(Branch) < 6)
b<- droplevels(b)
summary(b$Branch)
bf<- subset(b, as.numberi(Pos) < 6)
bf<- subset(b, as.numeric(Pos) < 6)
bf<-droplevels(bf)
head(bf, n=15)
summary(bf$Pos)
install.packages("goeveg")
library(goeveg)
f1<- subset(bf, as.numeric(Pos) ==1)
head(f1, n=15)
f2<- subset(bf, as.numeric(Pos) ==2)
f3<- subset(bf, as.numeric(Pos) ==3)
f4<- subset(bf, as.numeric(Pos) ==4)
f5<- subset(bf, as.numeric(Pos) ==5)
cv(f1$FL)
cv(f2$FL)
cv(f3$FL)
cv(f4$FL)
cv(f5$FL)
#FD
cv(f1$FD)
cv(f2$FD)
cv(f3$FD)
cv(f4$FD)
cv(f5$FD)
#B
cv(f1$B)
cv(f2$B)
cv(f3$B)
cv(f4$B)
cv(f5$B)
#data for within branch across flower position
b1<- subset(bf, as.numeric(Branch) ==1)
b2<- subset(bf, as.numeric(Branch) ==2)
b3<- subset(bf, as.numeric(Branch) ==3)
b4<- subset(bf, as.numeric(Branch) ==4)
b5<- subset(bf, as.numeric(Branch) ==5)
#FL
cv(b1$FL)
cv(b2$FL)
cv(b3$FL)
cv(b4$FL)
cv(b5$FL)
#FD
cv(b1$FD)
cv(b2$FD)
cv(b3$FD)
cv(b4$FD)
cv(b5$FD)
#B
cv(b1$B)
cv(b2$B)
cv(b3$B)
cv(b4$B)
cv(b5$B)
#FL
cv(f1$FL)
cv(f2$FL)
cv(f3$FL)
cv(f4$FL)
cv(f5$FL)
#FD
cv(f1$FD)
cv(f2$FD)
cv(f3$FD)
cv(f4$FD)
cv(f5$FD)
#B
cv(f1$B)
cv(f2$B)
cv(f3$B)
cv(f4$B)
cv(f5$B)
#data for within branch across flower position
b1<- subset(bf, as.numeric(Branch) ==1)
b2<- subset(bf, as.numeric(Branch) ==2)
b3<- subset(bf, as.numeric(Branch) ==3)
b4<- subset(bf, as.numeric(Branch) ==4)
b5<- subset(bf, as.numeric(Branch) ==5)
#FL
cv(b1$FL)
cv(b2$FL)
cv(b3$FL)
cv(b4$FL)
cv(b5$FL)
#FD
cv(b1$FD)
cv(b2$FD)
cv(b3$FD)
cv(b4$FD)
cv(b5$FD)
#B
cv(b1$B)
cv(b2$B)
cv(b3$B)
cv(b4$B)
cv(b5$B)
?cv
