hist(chisq_values, freq = FALSE,
xlab = "Chi-square value",
ylin=c(0, 0.100),
col = "goldenrod",
border = "white")
# Plot a histogram of the chi-square statistics using density scaling
hist(chisq_values, freq = FALSE,
xlab = "Chi-square value",
ylim = =c(0, 0.100),
# Plot a histogram of the chi-square statistics using density scaling
hist(chisq_values, freq = FALSE,
xlab = "Chi-square value",
ylim = c(0, 0.100),
col = "goldenrod",
border = "white")
# Overlay a density curve on the histogram
lines(density(chisq_values), col = "red", lwd = 2)
# Add a vertical line at the observed chi-square value (44.89)
abline(v = 44.89, col = "blue", lwd = 2, lty = 2)
# Add a label "observed" near the vertical line.
# Adjust the y-coordinate (here using max density value) and pos=4 to position text to the right.
density_est <- density(chisq_values)
text(x = 44.89, y = max(density_est$y), labels = "observed", pos = 4, col = "blue")
text(x = 44.89, y = max(density_est$y), labels = "observed", pos = 1, col = "blue")
text(x = 44.89, y = max(density_est$y), labels = "observed", pos = 0.5, col = "blue")
text(x = 44.89, y = max(density_est$y), labels = "observed", pos = 0, col = "blue")
# Plot a histogram of the chi-square statistics using density scaling
hist(chisq_values, freq = FALSE,
xlab = "Chi-square value",
ylim = c(0, 0.100),
col = "goldenrod",
border = "white")
# Overlay a density curve on the histogram
lines(density(chisq_values), col = "red", lwd = 2)
# Add a vertical line at the observed chi-square value (44.89)
abline(v = 44.89, col = "blue", lwd = 2, lty = 2)
# Add a label "observed" to the left of the vertical line.
# 'pos = 2' positions the label to the left of the coordinates provided.
text(x = 44.89, y = max(density_est$y), labels = "observed", pos = 2, col = "blue")
# Plot a histogram of the chi-square statistics using density scaling
hist(chisq_values, freq = FALSE,
main = NULL,
xlab = "Chi-square value",
ylim = c(0, 0.100),
col = "goldenrod",
border = "white")
# Overlay a density curve on the histogram
lines(density(chisq_values), col = "red", lwd = 2)
# Add a vertical line at the observed chi-square value (44.89)
abline(v = 44.89, col = "blue", lwd = 2, lty = 2)
# Add a label "observed" to the left of the vertical line.
# 'pos = 2' positions the label to the left of the coordinates provided.
text(x = 44.89, y = max(density_est$y), labels = "observed", pos = 2, col = "blue")
pchisq(q=44.89, df=11, lower.tail = F)
?pchisq
pchisq(q=44.89, df=11, lower.tail = T)
# NOTE: path for MK's home computer
dat<- read.csv("C:/Users/mason/Dropbox/git/students/Marisa Kenna/Data/data.csv")
head(dat)
dat<- c(12.1, 13.3, 14.5, 15.0, 15.2, 16.1, 17.3)
hist(dat)
mean(dat)
median(dat)
dat<- rpois(10, 1.5)
hist(dat)
dat
mean(dat)
median(dat)
dat<- c(2, 1, 3, 5, 2, 1, 3, 2, 0, 1)
mean(dat)
median(dat)
sd(dat)
IQR(dat)
IQR(dat, type = 2)
dat<- c(2, 1, 3, 4, 2, 1, 3, 2, 0, 1)
mean(dat)
median(dat)
sd(dat)
IQR(dat, type = 2)
dat<- c(2, 1, 3, 3, 2, 1, 3, 2, 0, 1)
mean(dat)
median(dat)
sd(dat)
IQR(dat, type = 2)
length(dat)
dat<- c(2, 1, 3, 5, 2, 1, 3, 2)
mean(dat)
median(dat)
length(dat)
sd(dat)
IQR(dat, type = 2)
dat<- c(2, 1, 3, 4, 2, 1, 3, 2)
mean(dat)
median(dat)
length(dat)
sd(dat)
IQR(dat, type = 2)
dat<- c(2, 1, 3, 4, 2, 1, 3, 2)
mean(dat)
median(dat)
length(dat)
sd(dat)
IQR(dat, type = 2)
dat<- c(2, 1, 3, 4, 2, 1, 3, 2,4)
mean(dat)
median(dat)
dat<- c(2, 1, 3, 4, 2, 1, 3, 2,3)
mean(dat)
median(dat)
dat<- c(2, 1, 3, 4, 2, 1, 3, 2)
mean(dat)
median(dat)
length(dat)
sd(dat)
IQR(dat, type = 2)
var(dat)
g<- c(47, 23.5, 23, 34.5, 34.5, 34, 33.5, 17, 37, 43.5, 25.5, 26.5, 35, 33.5,
26, 36.5, 37.5, 32.5, 34, 42, 34.5, 23.5, 42, 48.5, 38, 27.5, 35)
length(g)
mean(g)
median(g)
g<- as.data.frame(g)
mean(g)
median(g)
g
mean(g$g)
median(g$g)
g$pcr<- 100*(g$g/50)
g
mean(g$pcr)
median(g$pcr)
hist(g$pcr)
?hist
hist(g$pcr, breaks = 15)
hist(g$pcr, breaks = 27)
hist(g$pcr, breaks = 50)
hist(g$pcr, breaks = 20)
hist(g$pcr, breaks = 15)
hist(g$pcr, breaks = 9)
hist(g$pcr, breaks = 5)
hist(g$pcr)
hist(g$pcr,
main=NULL,
xlab = "Grade (%)")
#NB: pathway is for MK's home computer
dat<- read.csv("C:/Users/mason/Dropbox/git/students/Oliver Noseworthy/Data/data2.csv")
# Load required libraries
library(ggplot2)
library(splines)
library(gridExtra)
library(dplyr)
library(tidyverse)
library(caret)
#NB: pathway is for MK's home computer
dat<- read.csv("C:/Users/mason/Dropbox/git/students/Oliver Noseworthy/Data/data2.csv")
library(refund)
dat$array_plant<- as.factor(dat$array_plant)
dat$Array<- as.factor(dat$Array)
dat$Pos<- as.factor(dat$Pos)
table(is.na(dat$tube.l))# no missing values in tube.l
table(is.na(dat$flw.d)) #no missing values in flw.d
# tube length and flower diameter separation
tube<- dat[c("array_plant","Pos", "tube.l")]
flw.d<- dat[c("array_plant","Pos", "flw.d")]
# total seeds and fruits across all plants
seeds<- aggregate(dat$seeds, by=list(dat$array_plant), sum)
seeds$Group.1<- NULL
head(seeds)
flw.no<- aggregate(as.numeric(dat$Pos), by=list(dat$array_plant), max)
flw.no$Group.1<-NULL
head(flw.no)
flw.no<- as.matrix(flw.no)
flw.no<- as.vector(flw.no)
flw.no<- as.data.frame(flw.no)
# Reshape into long-format matrix
long<- reshape(tube, timevar="Pos", idvar=c("array_plant"), direction = "wide") # ignore warnings
long$array_plant<- NULL
long<- as.matrix(long)
tube.length<-long
# fit model with poisson distribution
fit.1<- pfr(seeds ~ lf.vd(tube.length, vd=unlist(flw.no), basistype = "te", transform='standardized')
,family='poisson')
summary(fit.1)
# fit model with negative binomial distribution
fit.2<- pfr(seeds ~ lf.vd(tube.length, , vd=unlist(flw.no), basistype = "te", transform='standardized')
, offset=unlist(flw.no) ,  family='nb')
summary(fit.2)
AIC(fit.1, fit.2)# negative binomial better
fit.coef<- coef(fit.2)   #Note: are these transformed?
#make absolute frstart date
fit.coef$x<- fit.coef$tube.length.arg * fit.coef$tube.length.vd
fit.coef
head(fit.coef)
write.table(fit.coef, file="tube_length_plot_data.csv",sep = ",", row.names = F)
getwd()
# Reshape into long-format matrix
long<- reshape(flw.d, timevar="Pos", idvar=c("array_plant"), direction = "wide") # ignore warnings
long$array_plant<- NULL
long<- as.matrix(long)
flw.d<-long
# fit model with poisson distribution
fit.1<- pfr(seeds ~ lf.vd(flw.d, vd=unlist(flw.no), basistype = "te", transform='standardized')
,family='poisson')
summary(fit.1)
# fit model with negative binomial distribution
fit.2<- pfr(seeds ~ lf.vd(flw.d, , vd=unlist(flw.no), basistype = "te", transform='standardized')
, offset=unlist(flw.no) ,  family='nb')
summary(fit.2)
AIC(fit.1, fit.2)# negative binomial better
fit.coef<- coef(fit.2)   #Note: are these transformed?
write.table(fit.coef, file="flower_diam_plot_data.csv",sep = ",", row.names = F)
head(fit.coef)
#make absolute frstart date
fit.coef$x<- fit.coef$tube.length.arg * fit.coef$tube.length.vd
plot(fit.coef$x, fit.coef$value, type="l", main="absolute")
plot(fit.coef$tube.length.arg, fit.coef$value, type="l", main="relative")
#make absolute frstart date
fit.coef$x<- fit.coef$flw.d.arg * fit.coef$flw.d.vd
plot(fit.coef$x, fit.coef$value, type="l", main="absolute")
plot(fit.coef$tube.length.arg, fit.coef$value, type="l", main="relative")
plot(fit.coef$flw.d.arg, fit.coef$value, type="l", main="relative")
write.table(fit.coef, file="flower_diam_plot_data.csv",sep = ",", row.names = F)
head(fit.coef)
write.table(fit.coef, file="flower_diam_plot_data.csv",sep = ",", row.names = F)
g<- c(47, 23.5, 23, 34.5, 34.5, 34, 33.5, 17, 37, 43.5, 25.5, 26.5, 35, 33.5,
26, 36.5, 37.5, 32.5, 34, 42, 34.5, 23.5, 42, 48.5, 38, 27.5, 35)
length(g)
g<- as.data.frame(g)
mean(g$g)
median(g$g)
g$pcr<- 100*(g$g/50)
g
mean(g$pcr)
median(g$pcr)
hist(g$pcr,
main=NULL,
xlab = "Grade (%)")
v<- c(100, 380,-100, 0, -50, -50, -50, -150, 100, -50, -50, -200, 50, 100, 100)
mean(v)
v<- c(8.69, 8.15, 9.25, 9.45, 8.96, 8.65, 8.43, 8.79, 8.63)
mean(v)
sd(v)
se<- sd(v)/(sqrt(length(v)))
se
up<- mean(v) + 2*se
lo<- mean(v)- 2*se
up
lo
#C
library(Rcmdr)
#C
library(Rcmdr)
data<- read.csv("C:/Users/mason/Dropbox/git/students/Megan Fraser/Data/data.csv")
# Load required package
library(glmmTMB)
# subset to only data with 0 or 1 for flw fate
data2<- data[data$flw.fate %in% c(0, 1), ]
data$seeds<- as.numeric(data$seeds)
# Replace NAs with 0s
data$seeds[is.na(data$seeds)] <- 0
# two spellings of enh/enhanced and control...fixed in origional data
unique(data$treat)
# Fit the model for seed set (count outcome)
seed_set_model <- glmmTMB(
seeds ~ treat + flw.no + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
# Model summary
summary(seed_set_model)
# Check for overdispersion
overdispersion_test <- function(model) {
rdf <- df.residual(model)
rp <- residuals(model, type = "pearson")
disp <- sum(rp^2) / rdf
return(disp)
}
overdispersion_test(seed_set_model)
# If dispersion > 1, overdispersion is present, confirming negative binomial is appropriate.
# hmmmm: 0.3596635 indicates underdispersed! Try Poisson dist
# Fit the model for seed set (count outcome)
seed_set_model <- glmmTMB(
seeds ~ treat + (1|plant.id),
family = poisson(link = "logit"),  data = data,
)
# Model summary
summary(seed_set_model)
# Load emmeans package
library(emmeans)
# Compute estimated marginal means for treatments
seed_emmeans <- emmeans(seed_set_model, ~ treat)
# Display the marginal means
summary(seed_emmeans)
# Perform pairwise comparisons between treatments
pairwise_comparisons <- pairs(seed_emmeans)
# Display the pairwise comparisons
summary(pairwise_comparisons)
# Pairwise comparisons with different p-value adjustment methods
summary(pairs(seed_emmeans, adjust = "bonferroni")) # Bonferroni adjustment
summary(pairs(seed_emmeans, adjust = "sidak"))      # Sidak adjustment
summary(pairs(seed_emmeans, adjust = "none"))       # No adjustment
# Plot EMMs with confidence intervals
plot(seed_emmeans, comparisons = TRUE) # Adds pairwise comparison lines
# Fit the model for seed set (count outcome)
vis <- glmmTMB(
visits ~ treat + (1|plant.id),
family = poisson(link = "logit"),  data = data,
)
# Model summary
summary(vis)
# Fit the model for seed set (count outcome)
visit_nb1 <- glmmTMB(
visits ~ treat + flw.no + flw.no:treat + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
# Model summary
summary(visit_nb1)
# Check for overdispersion
overdispersion_test <- function(model) {
rdf <- df.residual(model)
rp <- residuals(model, type = "pearson")
disp <- sum(rp^2) / rdf
return(disp)
}
overdispersion_test(visit_nb1)
##### just for fun:
# Fit the model for seed set (count outcome)
visit_nb.1 <- glmmTMB(
seeds ~ treat + visits + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb.2 <- glmmTMB(
seeds ~ treat + visits + flw.no + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb.3 <- glmmTMB(
seeds ~ treat + visits + flw.no + plant.ht + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb <- glmmTMB(
seeds ~ treat + visits + flw.no +plant.ht + flw.no*plant.ht + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
AIC(visit_nb.1, visit_nb.2, visit_nb.3, visit_nb)
anova(visit_nb.1, visit_nb.2, visit_nb.3, visit_nb)
# Fit the model for seed set (count outcome)
visit_nb.1 <- glmmTMB(
seeds ~ treat + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb.2 <- glmmTMB(
seeds ~ treat + flw.no + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb.3 <- glmmTMB(
seeds ~ treat + flw.no + plant.ht + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb <- glmmTMB(
seeds ~ treat + flw.no +plant.ht + flw.no*plant.ht + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
AIC(visit_nb.1, visit_nb.2, visit_nb.3, visit_nb)
anova(visit_nb.1, visit_nb.2, visit_nb.3, visit_nb)
# Model summary
summary(visit_nb)
# Fit the model for seed set (count outcome)
visit_nb.1 <- glmmTMB(
seeds ~ treat + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb.2 <- glmmTMB(
seeds ~ treat + flw.no + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb.3 <- glmmTMB(
seeds ~ treat + flw.no + plant.ht + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb <- glmmTMB(
seeds ~ treat +flw.no +plant.ht + flw.no*plant.ht + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
AIC(visit_nb.1, visit_nb.2, visit_nb.3, visit_nb)
anova(visit_nb.1, visit_nb.2, visit_nb.3, visit_nb)
# Model summary
summary(visit_nb)
visit_nb <- glmmTMB(
seeds ~ treat + visits +  flw.no*plant.ht + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
# Fit the model for seed set (count outcome)
visit_nb.1 <- glmmTMB(
seeds ~ treat + visits + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb.2 <- glmmTMB(
seeds ~ treat + visits + flw.no + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb.3 <- glmmTMB(
seeds ~ treat + visits + flw.no + plant.ht + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb <- glmmTMB(
seeds ~ treat + visits +  flw.no*plant.ht + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
AIC(visit_nb.1, visit_nb.2, visit_nb.3, visit_nb)
anova(visit_nb.1, visit_nb.2, visit_nb.3, visit_nb)
# Fit the model for seed set (count outcome)
visit_nb.1 <- glmmTMB(
seeds ~ treat +  (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb.2 <- glmmTMB(
seeds ~ treat +  flw.no + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb.3 <- glmmTMB(
seeds ~ treat +  flw.no + plant.ht + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
visit_nb <- glmmTMB(
seeds ~ treat +  flw.no*plant.ht + (1|plant.id),
family = nbinom2, # Use 'nbinom2' for negative binomial; adjust if overdispersion isn't an issue
data = data
)
AIC(visit_nb.1, visit_nb.2, visit_nb.3, visit_nb)
anova(visit_nb.1, visit_nb.2, visit_nb.3, visit_nb)
head(data, n=10)
#home computer
setwd("C:/Users/mason/Dropbox/git/Vicia/")
dat<- read.csv("vicia_final_data.csv")
library(glmmTMB)
library(DHARMa)
library(car)
library(ggplot2)
library(tidyverse)
library(caret)
library(emmeans)
?untidy
dat$Branch<- as.factor(dat$Branch)
dat$flw_date<- as.factor(dat$flw_date)
one<- glmmTMB(B ~  Branch, family="gaussian", data=b.one)
dat2<- dat[!is.na(dat$B), ]
dat2$PlantID<- as.factor(dat2$PlantID)
dat2$Branch<- as.factor(dat2$Branch)
dat2$Pos<- as.factor(dat2$Pos)
dat2$PosSeq<- as.factor(dat2$PosSeq)
sum(dat2$FlwFate)/length(dat2$FlwFate)
#number of plants setting fruit
frt.plant<- aggregate(dat2$FlwFate, by=list(dat2$PlantID), sum) # 35 of 40 set at least 1 fruit
#mean fruit per plant
mean(frt.plant$x)# 3.2 fruits/plant
#seeds/fruit
sum(dat2$seeds)/sum(dat2$FlwFate)# 3.5112 seeds/fruit
#seeds per plant
seed.plant<- aggregate(dat2$seeds, by=list(dat2$PlantID), sum)
#flowers per plants
flws<- aggregate(as.numeric(dat2$PosSeq), by=list(dat2$PlantID), max)
library(glmmTMB)
library(DHARMa)
library(car)
library(ggplot2)
library(tidyverse)
library(caret)
library(emmeans)
dat2$ovules<- dat2$seeds + dat2$aborted + dat2$unfert
a<- glmmTMB(ovules ~  Branch, family="nbinom1", data=dat2)
b<- glmmTMB(ovules ~  Branch + Pos, family="nbinom1", data=dat2)
c<- glmmTMB(ovules ~  Branch + Pos + PosSeq, family="nbinom1", data=dat2)
testDispersion(b)
simulateResiduals(fittedModel = b, plot = T)
Anova(b, type=3)
summary(c)
AIC(a, b, c)
m<- emmeans(a, "Branch", type='response')
plot(m)
summary(a)
summary(b)
summary(c)
AIC(a, b, c)
f<- fitted(b)
plot(f)
abline(glm(ovules ~ PosSeq + Branch, data=dat2))
model.gam <- gam(B ~ s(PosSeq) + PlantID, data=dat2)
library(mgcv)
model.gam <- gam(B ~ s(PosSeq) + PlantID, data=dat2)
model.gam
summary(model.gam)
