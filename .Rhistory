y = "Predicted Trait Value")
# Individual fits by plant
ggplot(data, aes(x = FlowerPosition, y = TraitValue, group = PlantID, color = as.factor(PlantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (B-Spline Fits)",
x = "Flower Position",
y = "Trait Value",
color = "Plant ID")
?expand.grid
names(dat)
# Fit B-splines using Generalized Additive Models (GAM) for tube length
model_tube <- gam(tube.l ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re") + s(Branch, bs = "re"),
data = dat, method = "REML")
# Fit B-splines for flower diameter
model_flw <- gam(flw.d ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re") + s(Branch, bs = "re"),
data = data, method = "REML")
# Fit B-splines for flower diameter
model_flw <- gam(flw.d ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re") + s(Branch, bs = "re"),
data = dat, method = "REML")
# Generate prediction data
new_data <- expand.grid(PosArray = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(dat$plantID),
Branch = unique(dat$Branch))
# Plot: Mean B-Spline Fit Across Multiple Individuals
ggplot(new_data, aes(x = FlowerPosition, y = PredictedTrait)) +
geom_line(size = 1, color = "blue") +
geom_point(data = data, aes(x = FlowerPosition, y = TraitValue), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation within Plants",
x = "Flower Position",
y = "Predicted Trait Value")
# Individual fits by plant
ggplot(data, aes(x = FlowerPosition, y = TraitValue, group = PlantID, color = as.factor(PlantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (B-Spline Fits)",
x = "Flower Position",
y = "Trait Value",
color = "Plant ID")
head(new_data)
# Generate prediction data
new_data <- expand.grid(Pos = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(dat$plantID),
Branch = unique(dat$Branch))
# Plot: Mean B-Spline Fit Across Multiple Individuals
ggplot(new_data, aes(x = Flower Position, y = PredictedTrait)) +
# Plot: Mean B-Spline Fit Across Multiple Individuals
ggplot(new_data, aes(x = Pos, y = PredictedTrait)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = FlowerPosition, y = TraitValue), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation within Plants",
x = "Flower Position",
y = "Predicted Trait Value")
# Plot: Mean B-Spline Fit Across Multiple Individuals
ggplot(new_data, aes(x = Pos, y = PosArray)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = FlowerPosition, y = TraitValue), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation within Plants",
x = "Flower Position",
y = "Predicted Trait Value")
new_data$PredictedTube <- predict(model_tube, new_data, exclude = c("s(plantID)", "s(Branch)"))
new_data$PredictedFlw <- predict(model_flw, new_data, exclude = c("s(plantID)", "s(Branch)"))
# Plot: Mean B-Spline Fit for Tube Length
p1 <- ggplot(new_data, aes(x = PosArray, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = data, aes(x = PosArray, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
p2 <- ggplot(new_data, aes(x = PosArray, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
geom_point(data = data, aes(x = PosArray, y = flw.d), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Individual fits by plant for tube length
p3 <- ggplot(data, aes(x = PosArray, y = tube.l, group = plantID, color = as.factor(plantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (Tube Length)",
x = "Flower Position in Array",
y = "Tube Length",
color = "Plant ID")
# Print plots
print(p1)
# Plot: Mean B-Spline Fit for Tube Length
ggplot(new_data, aes(x = PosArray, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = data, aes(x = PosArray, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Tube Length
ggplot(new_data, aes(x = PosArray, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = PosArray, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Tube Length
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = Pos, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
geom_point(data = data, aes(x = Pos, y = flw.d), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
geom_point(data = dat, aes(x = Pos, y = flw.d), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Individual fits by plant for tube length
ggplot(data, aes(x = Pos, y = tube.l, group = plantID, color = as.factor(plantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (Tube Length)",
x = "Flower Position in Array",
y = "Tube Length",
color = "Plant ID")
# Individual fits by plant for tube length
ggplot(dat, aes(x = Pos, y = tube.l, group = plantID, color = as.factor(plantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (Tube Length)",
x = "Flower Position in Array",
y = "Tube Length",
color = "Plant ID")
#NB: pathway is for MK's home computer
dat<- read.csv("C:/Users/mason/Dropbox/git/students/Oliver Noseworthy/Data/data2.csv")
head(dat)
attach(dat)
# Load necessary packages
library(mgcv)
library(ggplot2)
library(dplyr)
# Fit B-splines using Generalized Additive Models (GAM) for tube length
model_tube <- gam(tube.l ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re") + s(Branch, bs = "re"),
data = dat, method = "REML")
# Fit B-splines for flower diameter
model_flw <- gam(flw.d ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re") + s(Branch, bs = "re"),
data = dat, method = "REML")
# Generate prediction data
new_data <- expand.grid(Pos = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(dat$plantID),
Branch = unique(dat$Branch))
new_data$PredictedTube <- predict(model_tube, new_data, exclude = c("s(plantID)", "s(Branch)"))
new_data$PredictedFlw <- predict(model_flw, new_data, exclude = c("s(plantID)", "s(Branch)"))
# Plot: Mean B-Spline Fit for Tube Length
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = Pos, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
geom_point(data = dat, aes(x = Pos, y = flw.d), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Individual fits by plant for tube length
ggplot(dat, aes(x = Pos, y = tube.l, group = plantID, color = as.factor(plantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (Tube Length)",
x = "Flower Position in Array",
y = "Tube Length",
color = "Plant ID")
# Plot: Mean B-Spline Fit for Tube Length
p1 <- ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = PosArray, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 8), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 20), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 3), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 4), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = knots), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
PredictedTube
head(new_data)
summary(model_tube)
# Fit B-splines using Generalized Additive Models (GAM) for tube length
model_tube <- gam(tube.l ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re"),
data = dat, method = "REML")
summary(model_tube)
# Fit B-splines for flower diameter
model_flw <- gam(flw.d ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re"),
data = dat, method = "REML")
# Generate prediction data
new_data <- expand.grid(Pos = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(dat$plantID),
Branch = unique(dat$Branch))
# Generate prediction data
new_data <- expand.grid(Pos = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(dat$plantID))
new_data$PredictedTube <- predict(model_tube, new_data, exclude = c("s(plantID)", "s(Branch)"))
new_data$PredictedFlw <- predict(model_flw, new_data, exclude = c("s(plantID)", "s(Branch)"))
# Plot: Mean B-Spline Fit for Tube Length
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = Pos, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
geom_point(data = dat, aes(x = Pos, y = flw.d), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Individual fits by plant for tube length
ggplot(dat, aes(x = Pos, y = tube.l, group = plantID, color = as.factor(plantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (Tube Length)",
x = "Flower Position in Array",
y = "Tube Length",
color = "Plant ID")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
#home computer
setwd("C:/Users/mason/Dropbox/git/Vicia/")
data<- read.csv("vicia_final_data.csv")
# Linear selection
library(dplyr)
library(glmmTMB)
library(car)
# try sd as a single (i.e., plant-level) covariate
sd.b.cov<- aggregate(data$B, by=list(data$PlantID), sd)
sd.b.cov$Group.1<- NULL
fit.5.0<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day),  basistype = "s", bs = "tp", transform = "standardized") + unlist(sd.b.cov)
,family='ziP')
#maximum seed set per plant
seed<- aggregate(data$seeds, by=list(data$PlantID), sum)
seed$Group.1<- NULL
#calcualte total flower number
flw.no<- aggregate(data$PosSeq, by=list(data$PlantID), max)
flw.no$Group.1<- NULL
#calculate total branch number
branch.no<- aggregate(data$Branch, by=list(data$PlantID), max)
branch.no$Group.1<- NULL
# Prepare functional predictors
B<- mn[c("PlantID","flw_date", "mean_B")]
library(dplyr)
means.ind <- data %>%
group_by(PlantID, flw_date) %>%
summarise(
mean_FL = mean(FL, na.rm = TRUE),
sd_FL = sd(FL, na.rm = TRUE),
var_FL = var(FL, na.rm = TRUE),
mean_FD = mean(FD, na.rm = TRUE),
sd_FD = sd(FD, na.rm = TRUE),
var_FD = var(FD, na.rm = TRUE),
mean_B = mean(B, na.rm = TRUE),
sd_B = sd(B, na.rm = TRUE),
var_B = var(B, na.rm = TRUE),
mean_flw_vol = mean(flw_vol, na.rm = TRUE),
sd_flw_vol = sd(flw_vol, na.rm = TRUE),
var_flw_vol = var(flw_vol, na.rm = TRUE),
.groups = "drop"
)
mn<- as.data.frame(means.ind)
# save mean/sd/var data to csv file for plotting
write.table(mn, file="Results and Figures/means.csv", sep = ',', row.names = F)
# plot
library(ggplot2)
#B
ggplot(mn, aes(x = flw_date, y = mean_B, group = PlantID, color = PlantID)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = mean_B - sd_B, ymax = mean_B + sd_B, fill = PlantID), alpha = 0.2, color = NA) +
labs(
x = "Day of Flowering Season",
y = "Mean Banner Height ± SD",
title = "Banner Height Over Time by Plant"
) +
theme_minimal() +
theme(legend.position = "none")  # hides legend if too many plants
#FL
ggplot(mn, aes(x = flw_date, y = mean_FL, group = PlantID, color = PlantID)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = mean_FL - sd_FL, ymax = mean_FL + sd_FL, fill = PlantID), alpha = 0.2, color = NA) +
labs(
x = "Day of Flowering Season",
y = "Mean Flower Length ± SD",
title = "FLower Length Over Time by Plant"
) +
theme_minimal() +
theme(legend.position = "none")  # hides legend if too many plants
#FD
ggplot(mn, aes(x = flw_date, y = mean_FD, group = PlantID, color = PlantID)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = mean_FD - sd_FD, ymax = mean_FD + sd_FD, fill = PlantID), alpha = 0.2, color = NA) +
labs(
x = "Day of Flowering Season",
y = "Mean Flower Diameter ± SD",
title = "FLower Diameter Over Time by Plant"
) +
theme_minimal() +
theme(legend.position = "none")  # hides legend if too many plants
####################################################################################
#
# Use above means in functional regressoin
#maximum seed set per plant
seed<- aggregate(data$seeds, by=list(data$PlantID), sum)
seed$Group.1<- NULL
#calcualte total flower number
flw.no<- aggregate(data$PosSeq, by=list(data$PlantID), max)
flw.no$Group.1<- NULL
#calculate total branch number
branch.no<- aggregate(data$Branch, by=list(data$PlantID), max)
branch.no$Group.1<- NULL
# Prepare functional predictors
B<- mn[c("PlantID","flw_date", "mean_B")]
FL<- mn[c("PlantID","flw_date", "mean_FL")]
FD<- mn[c("PlantID","flw_date", "mean_FD")]
# Reshape into long-format matrix
long<- reshape(B, timevar="flw_date", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
#rename
banner<-long
# Reshape into long-format matrix
long<- reshape(FL, timevar="flw_date", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
#rename
fl<-long
# Reshape into long-format matrix
long<- reshape(FD, timevar="flw_date", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
#rename
fd<-long
# set up variable domain:
# 'flw_date' -> day of flowering season (1-18)
flw_day<- aggregate(mn$flw_date, by=list(mn$PlantID), max)
flw_day$Group.1<- NULL
flw_day<- as.matrix(flw_day)
flw_day<- as.vector(flw_day)
#load Refund - .
library(refund)
# try sd as a single (i.e., plant-level) covariate
sd.b.cov<- aggregate(data$B, by=list(data$PlantID), sd)
sd.b.cov$Group.1<- NULL
fit.5.0<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day),  basistype = "s", bs = "tp", transform = "standardized") + unlist(sd.b.cov)
,family='ziP')
fit.5<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day),  basistype = "s", bs = "tp", transform = "standardized") + unlist(sd.b.cov)
+ unlist(flw.no),family='ziP')
fit.5.1<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day), basistype = "s", bs = "tp", transform = "standardized") + unlist(sd.b.cov)
+ unlist(flw.no) + unlist(branch.no),family='ziP')
fit.5<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day),  basistype = "s", bs = "tp", transform = "standardized") + unlist(sd.b.cov)
,family='ziP')
fit.5.1<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day),  basistype = "s", bs = "tp", transform = "standardized") + unlist(sd.b.cov)
+ unlist(flw.no),family='ziP')
fit.5.2<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day), basistype = "s", bs = "tp", transform = "standardized") + unlist(sd.b.cov)
+ unlist(flw.no) + unlist(branch.no),family='ziP')
fit.5.3<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day), basistype = "s", bs = "tp", transform = "standardized")+ unlist(sd.b.cov)
+ unlist(flw.no) + unlist(branch.no) + unlist(flw.no):unlist(branch.no),family='ziP')
summary(fit.5)
summary(fit.5.1)
summary(fit.5.2)
summary(fit.5.3)
AIC(fit.4.0, fit.4, fit.4.1, fit.4.2,fit.5, fit.5.1, fit.5.2, fit.5.3)# fit.5 best AIC fit
AIC(fit.5, fit.5.1, fit.5.2, fit.5.3)# fit.5 best AIC fit
AIC(fit.4, fit.4.1, fit.4.2, fit.4.3, fit.5, fit.5.1, fit.5.2, fit.5.3)# fit.5 best AIC fit
fit.4<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day),  basistype = "s", bs = "tp", transform = "standardized") + lf.vd(sd.banner, vd=unlist(flw_day), basistype = 'te')
, family='ziP')
B.sd<- mn[c("PlantID","flw_date", "sd_B")]
# Reshape into long-format matrix
long<- reshape(B.sd, timevar="flw_date", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
#rename
sd.banner<-long
fit.4<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day),  basistype = "s", bs = "tp", transform = "standardized") + lf.vd(sd.banner, vd=unlist(flw_day), basistype = 'te')
, family='ziP')
fit.4.1<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day),  basistype = "s", bs = "tp", transform = "standardized") + lf.vd(sd.banner, vd=unlist(flw_day), basistype = 'te')
+ unlist(flw.no),family='ziP')
fit.4.2<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day),  basistype = "s", bs = "tp", transform = "standardized") + lf.vd(sd.banner, vd=unlist(flw_day), basistype = 'te')
+ unlist(flw.no) + unlist(branch.no),family='ziP')
fit.4.3<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day), basistype = "s", bs = "tp", transform = "standardized")+ lf.vd(sd.banner, vd=unlist(flw_day), basistype = 'te')
+ unlist(flw.no) + unlist(branch.no) + unlist(flw.no):unlist(branch.no),family='ziP')
AIC(fit.4, fit.4.1, fit.4.2, fit.4.3, fit.5, fit.5.1, fit.5.2, fit.5.3)# fit.5 best AIC fit
summary(fit.5.3)
fit<- coef(fit.5.3)
fit$x<- fit$banner.arg * fit$banner.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$banner.arg, fit$value, type="l", main="relative")
fit<- coef(fit.5)
fit$x<- fit$banner.arg * fit$banner.vd
plot(fit$x, fit$value, type="l", main="absolute")
AIC(fit.4, fit.4.1, fit.4.2, fit.4.3, fit.5, fit.5.1, fit.5.2, fit.5.3)# fit.5 best AIC fit
fit<- coef(fit.5)
fit$x<- fit$banner.arg * fit$banner.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$banner.arg, fit$value, type="l", main="relative")
summary(fit.5)
fit.5.3<- pfr(seed ~ lf.vd(banner, vd=unlist(flw_day), basistype = "s", bs = "tp", transform = "standardized")+ unlist(sd.b.cov)
+ unlist(flw.no) + unlist(branch.no) + unlist(flw.no):unlist(branch.no),family='ziP')
summary(fit.5.3)
fit<- coef(fit.5.3)
fit$x<- fit$banner.arg * fit$banner.vd
plot(fit$x, fit$value, type="l", main="absolute")
fit<- coef(fit.5)
fit$x<- fit$banner.arg * fit$banner.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$banner.arg, fit$value, type="l", main="relative")
# save plotting data
write.table(fit, file="Results and Figures/mean analysis/banner_means_selection_just_sd_cov.csv", sep = ',', row.names = F)
