main = "Distribution of Chi-square Statistics",
xlab = "Chi-square value",
ylin=c(0, 0.100),
col = "goldenrod",
border = "white")
# Plot a histogram of the chi-square statistics using density scaling
hist(chisq_values, freq = FALSE,
xlab = "Chi-square value",
ylin=c(0, 0.100),
col = "goldenrod",
border = "white")
# Plot a histogram of the chi-square statistics using density scaling
hist(chisq_values, freq = FALSE,
xlab = "Chi-square value",
ylim = =c(0, 0.100),
# Plot a histogram of the chi-square statistics using density scaling
hist(chisq_values, freq = FALSE,
xlab = "Chi-square value",
ylim = c(0, 0.100),
col = "goldenrod",
border = "white")
# Overlay a density curve on the histogram
lines(density(chisq_values), col = "red", lwd = 2)
# Add a vertical line at the observed chi-square value (44.89)
abline(v = 44.89, col = "blue", lwd = 2, lty = 2)
# Add a label "observed" near the vertical line.
# Adjust the y-coordinate (here using max density value) and pos=4 to position text to the right.
density_est <- density(chisq_values)
text(x = 44.89, y = max(density_est$y), labels = "observed", pos = 4, col = "blue")
text(x = 44.89, y = max(density_est$y), labels = "observed", pos = 1, col = "blue")
text(x = 44.89, y = max(density_est$y), labels = "observed", pos = 0.5, col = "blue")
text(x = 44.89, y = max(density_est$y), labels = "observed", pos = 0, col = "blue")
# Plot a histogram of the chi-square statistics using density scaling
hist(chisq_values, freq = FALSE,
xlab = "Chi-square value",
ylim = c(0, 0.100),
col = "goldenrod",
border = "white")
# Overlay a density curve on the histogram
lines(density(chisq_values), col = "red", lwd = 2)
# Add a vertical line at the observed chi-square value (44.89)
abline(v = 44.89, col = "blue", lwd = 2, lty = 2)
# Add a label "observed" to the left of the vertical line.
# 'pos = 2' positions the label to the left of the coordinates provided.
text(x = 44.89, y = max(density_est$y), labels = "observed", pos = 2, col = "blue")
# Plot a histogram of the chi-square statistics using density scaling
hist(chisq_values, freq = FALSE,
main = NULL,
xlab = "Chi-square value",
ylim = c(0, 0.100),
col = "goldenrod",
border = "white")
# Overlay a density curve on the histogram
lines(density(chisq_values), col = "red", lwd = 2)
# Add a vertical line at the observed chi-square value (44.89)
abline(v = 44.89, col = "blue", lwd = 2, lty = 2)
# Add a label "observed" to the left of the vertical line.
# 'pos = 2' positions the label to the left of the coordinates provided.
text(x = 44.89, y = max(density_est$y), labels = "observed", pos = 2, col = "blue")
pchisq(q=44.89, df=11, lower.tail = F)
?pchisq
pchisq(q=44.89, df=11, lower.tail = T)
# NOTE: path for MK's home computer
dat<- read.csv("C:/Users/mason/Dropbox/git/students/Marisa Kenna/Data/data.csv")
head(dat)
dat<- c(12.1, 13.3, 14.5, 15.0, 15.2, 16.1, 17.3)
hist(dat)
mean(dat)
median(dat)
dat<- rpois(10, 1.5)
hist(dat)
dat
mean(dat)
median(dat)
dat<- c(2, 1, 3, 5, 2, 1, 3, 2, 0, 1)
mean(dat)
median(dat)
sd(dat)
IQR(dat)
IQR(dat, type = 2)
dat<- c(2, 1, 3, 4, 2, 1, 3, 2, 0, 1)
mean(dat)
median(dat)
sd(dat)
IQR(dat, type = 2)
dat<- c(2, 1, 3, 3, 2, 1, 3, 2, 0, 1)
mean(dat)
median(dat)
sd(dat)
IQR(dat, type = 2)
length(dat)
dat<- c(2, 1, 3, 5, 2, 1, 3, 2)
mean(dat)
median(dat)
length(dat)
sd(dat)
IQR(dat, type = 2)
dat<- c(2, 1, 3, 4, 2, 1, 3, 2)
mean(dat)
median(dat)
length(dat)
sd(dat)
IQR(dat, type = 2)
dat<- c(2, 1, 3, 4, 2, 1, 3, 2)
mean(dat)
median(dat)
length(dat)
sd(dat)
IQR(dat, type = 2)
dat<- c(2, 1, 3, 4, 2, 1, 3, 2,4)
mean(dat)
median(dat)
dat<- c(2, 1, 3, 4, 2, 1, 3, 2,3)
mean(dat)
median(dat)
dat<- c(2, 1, 3, 4, 2, 1, 3, 2)
mean(dat)
median(dat)
length(dat)
sd(dat)
IQR(dat, type = 2)
var(dat)
g<- c(47, 23.5, 23, 34.5, 34.5, 34, 33.5, 17, 37, 43.5, 25.5, 26.5, 35, 33.5,
26, 36.5, 37.5, 32.5, 34, 42, 34.5, 23.5, 42, 48.5, 38, 27.5, 35)
length(g)
mean(g)
median(g)
g<- as.data.frame(g)
mean(g)
median(g)
g
mean(g$g)
median(g$g)
g$pcr<- 100*(g$g/50)
g
mean(g$pcr)
median(g$pcr)
hist(g$pcr)
?hist
hist(g$pcr, breaks = 15)
hist(g$pcr, breaks = 27)
hist(g$pcr, breaks = 50)
hist(g$pcr, breaks = 20)
hist(g$pcr, breaks = 15)
hist(g$pcr, breaks = 9)
hist(g$pcr, breaks = 5)
hist(g$pcr)
hist(g$pcr,
main=NULL,
xlab = "Grade (%)")
#NB: pathway is for MK's home computer
dat<- read.csv("C:/Users/mason/Dropbox/git/students/Oliver Noseworthy/Data/data2.csv")
# Load required libraries
library(ggplot2)
library(splines)
library(gridExtra)
library(dplyr)
library(tidyverse)
library(caret)
#NB: pathway is for MK's home computer
dat<- read.csv("C:/Users/mason/Dropbox/git/students/Oliver Noseworthy/Data/data2.csv")
library(refund)
dat$array_plant<- as.factor(dat$array_plant)
dat$Array<- as.factor(dat$Array)
dat$Pos<- as.factor(dat$Pos)
table(is.na(dat$tube.l))# no missing values in tube.l
table(is.na(dat$flw.d)) #no missing values in flw.d
# tube length and flower diameter separation
tube<- dat[c("array_plant","Pos", "tube.l")]
flw.d<- dat[c("array_plant","Pos", "flw.d")]
# total seeds and fruits across all plants
seeds<- aggregate(dat$seeds, by=list(dat$array_plant), sum)
seeds$Group.1<- NULL
head(seeds)
flw.no<- aggregate(as.numeric(dat$Pos), by=list(dat$array_plant), max)
flw.no$Group.1<-NULL
head(flw.no)
flw.no<- as.matrix(flw.no)
flw.no<- as.vector(flw.no)
flw.no<- as.data.frame(flw.no)
# Reshape into long-format matrix
long<- reshape(tube, timevar="Pos", idvar=c("array_plant"), direction = "wide") # ignore warnings
long$array_plant<- NULL
long<- as.matrix(long)
tube.length<-long
# fit model with poisson distribution
fit.1<- pfr(seeds ~ lf.vd(tube.length, vd=unlist(flw.no), basistype = "te", transform='standardized')
,family='poisson')
summary(fit.1)
# fit model with negative binomial distribution
fit.2<- pfr(seeds ~ lf.vd(tube.length, , vd=unlist(flw.no), basistype = "te", transform='standardized')
, offset=unlist(flw.no) ,  family='nb')
summary(fit.2)
AIC(fit.1, fit.2)# negative binomial better
fit.coef<- coef(fit.2)   #Note: are these transformed?
#make absolute frstart date
fit.coef$x<- fit.coef$tube.length.arg * fit.coef$tube.length.vd
fit.coef
head(fit.coef)
write.table(fit.coef, file="tube_length_plot_data.csv",sep = ",", row.names = F)
getwd()
# Reshape into long-format matrix
long<- reshape(flw.d, timevar="Pos", idvar=c("array_plant"), direction = "wide") # ignore warnings
long$array_plant<- NULL
long<- as.matrix(long)
flw.d<-long
# fit model with poisson distribution
fit.1<- pfr(seeds ~ lf.vd(flw.d, vd=unlist(flw.no), basistype = "te", transform='standardized')
,family='poisson')
summary(fit.1)
# fit model with negative binomial distribution
fit.2<- pfr(seeds ~ lf.vd(flw.d, , vd=unlist(flw.no), basistype = "te", transform='standardized')
, offset=unlist(flw.no) ,  family='nb')
summary(fit.2)
AIC(fit.1, fit.2)# negative binomial better
fit.coef<- coef(fit.2)   #Note: are these transformed?
write.table(fit.coef, file="flower_diam_plot_data.csv",sep = ",", row.names = F)
head(fit.coef)
#make absolute frstart date
fit.coef$x<- fit.coef$tube.length.arg * fit.coef$tube.length.vd
plot(fit.coef$x, fit.coef$value, type="l", main="absolute")
plot(fit.coef$tube.length.arg, fit.coef$value, type="l", main="relative")
#make absolute frstart date
fit.coef$x<- fit.coef$flw.d.arg * fit.coef$flw.d.vd
plot(fit.coef$x, fit.coef$value, type="l", main="absolute")
plot(fit.coef$tube.length.arg, fit.coef$value, type="l", main="relative")
plot(fit.coef$flw.d.arg, fit.coef$value, type="l", main="relative")
write.table(fit.coef, file="flower_diam_plot_data.csv",sep = ",", row.names = F)
head(fit.coef)
write.table(fit.coef, file="flower_diam_plot_data.csv",sep = ",", row.names = F)
g<- c(47, 23.5, 23, 34.5, 34.5, 34, 33.5, 17, 37, 43.5, 25.5, 26.5, 35, 33.5,
26, 36.5, 37.5, 32.5, 34, 42, 34.5, 23.5, 42, 48.5, 38, 27.5, 35)
length(g)
g<- as.data.frame(g)
mean(g$g)
median(g$g)
g$pcr<- 100*(g$g/50)
g
mean(g$pcr)
median(g$pcr)
hist(g$pcr,
main=NULL,
xlab = "Grade (%)")
#home computer
setwd("C:/Users/mason/Dropbox/git/Vicia/")
dat<- read.csv("vicia_final_data.csv")
head(dat)
######
# Prepare functional predictors
B<- dat[c("PlantID","PosSeq", "B")]
FL<- dat[c("PlantID","PosSeq", "FL")]
FD<- dat[c("PlantID","PosSeq", "FD")]
# Reshape into long-format matrix
long<- reshape(B, timevar="PosSeq", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
Banner.functional<- as.matrix(long)
# Reshape into long-format matrix
long<- reshape(FL, timevar="PosSeq", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
FL.functional<- as.matrix(long)
# Reshape into long-format matrix
long<- reshape(FD, timevar="PosSeq", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
FD.functional<- as.matrix(long)
# set up variable domain:
# "seqpos" -> position of flower in continuous sequence (across all branches)
seqpos<- aggregate(B$PosSeq, by=list(B$PlantID), max)
seqpos$Group.1<- NULL
seqpos<- as.matrix(seqpos)
seqpos<- as.vector(seqpos)
# Load required packages
library(REFUND)
# Load required packages
library(refund)
library(dplyr)
library(tidyr)
library(ggplot2)
library(MuMIn)  # For model comparison using AIC
library(caret)  # For cross-validation
library(lme4)   # For mixed-effects models
library(mgcv)   # For GAM models (nonlinear interactions)
# Set seed for reproducibility
set.seed(1729)
#############################################################################
#############################################################################
# assemble seeds set (fitness) and covariate data (branch no. and flower no.)
#maximum fruit set per plant
seed<- aggregate(dat$seeds, by=list(dat$PlantID), sum)
seed$Group.1<- NULL
#calcualte total flower number
flw.no<- aggregate(dat$PosSeq, by=list(dat$PlantID), max)
flw.no$Group.1<- NULL
bno<- dat[c("PlantID", "Branch")]
bno$Branch<- as.numeric(bno$Branch)
branch.no<- aggregate(bno$Branch, by=list(bno$PlantID), max)
branch.no$Group.1<- NULL
PlantID<- unique(bno$PlantID)
head(PlantID)
head(branch.no)
PlantID<- as.dataframe(unique(bno$PlantID))
head(PlantID)
PlantID<- as.data.frame(unique(bno$PlantID))
head(PlantID)
colnames(PlantID)<- c("PlantID")
### --- 1. Adding Random Effects for Plants ---
fit_random_effects <- pfr(seed ~
lf.vd(seqpos, Banner.functional, id = interaction(PlantID, branch.no),
basistype = "bspline", nbasis = 10) +
flw.no + branch.no + flw.no:branch.no + (1 | plant_id),  # Random intercept for plants
method = "REML")
### --- 1. Adding Random Effects for Plants ---
fit_random_effects <- pfr(seed ~
lf.vd(seqpos, Banner.functional, id = interaction(PlantID, branch.no),
, nbasis = 10) +
flw.no + branch.no + flw.no:branch.no + (1 | plant_id),  # Random intercept for plants
method = "REML")
### --- 1. Adding Random Effects for Plants ---
fit_random_effects <- pfr(seed ~
lf.vd(seqpos, Banner.functional, id = interaction(PlantID, branch.no),
, nbasis = 10) +
flw.no + branch.no + flw.no:branch.no + (1 | PlantID),  # Random intercept for plants
method = "REML")
seqpos
Banner.functional
flw.no
branch.no
PlantID
PlantID<- as.factor(PlantID)
PlantID<- as.factor(PlantID$PlantID)
### --- 1. Adding Random Effects for Plants ---
fit_random_effects <- pfr(seed ~
lf.vd(seqpos, Banner.functional, id = interaction(PlantID, branch.no),
, nbasis = 10) +
flw.no + branch.no + flw.no:branch.no + (1 | PlantID),  # Random intercept for plants
method = "REML")
?lf.vd
seeds
seed
hist(seed)
hist(seed$x)
summary(seed$x)
### --- 1. Adding Random Effects for Plants ---
fit_random_effects <- pfr(seed ~
lf.vd(Banner.functional, id = interaction(PlantID, branch.no),
, nbasis = 10) +
flw.no + branch.no + flw.no:branch.no + (1 | PlantID),  # Random intercept for plants
method = "REML")
### --- 1. Adding Random Effects for Plants ---
fit_random_effects <- pfr(seed ~
lf.vd(Banner.functional,vd=seqpos, id = interaction(PlantID, branch.no),
, nbasis = 10) +
flw.no + branch.no + flw.no:branch.no + (1 | PlantID),  # Random intercept for plants
method = "REML")
### --- 1. Adding Random Effects for Plants ---
fit_random_effects <- pfr(seed ~
lf.vd(Banner.functional,vd=seqpos, nbasis = 10) +
flw.no + branch.no + flw.no:branch.no + (1 | PlantID),  # Random intercept for plants
method = "REML")
dim(seed)
dim(Banner.functional)
dim(flw.no)
dim(branch.no)
dim(PlantID)
length(PlantID)
class(PlantID)
PlantID
PlantID<- as.data.frame(unique(bno$PlantID))
head(bno)
### --- 1. Adding Random Effects for Plants ---
fit_random_effects <- pfr(seed ~
lf.vd(Banner.functional,vd=seqpos, nbasis = 10) +
flw.no + bno$branch.no + flw.no:bno$branch.no + (1 | bno$PlantID),  # Random intercept for plants
method = "REML")
######
# Prepare functional predictors
B<- dat[c("PlantID","PosSeq", "B")]
FL<- dat[c("PlantID","PosSeq", "FL")]
FD<- dat[c("PlantID","PosSeq", "FD")]
# Reshape into long-format matrix
long<- reshape(B, timevar="PosSeq", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
#rename
banner<-long
# Reshape into long-format matrix
long<- reshape(FL, timevar="PosSeq", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
#rename
FL<-long
# Reshape into long-format matrix
long<- reshape(FD, timevar="PosSeq", idvar=c("PlantID"), direction = "wide")
long$PlantID<- NULL
long<- as.matrix(long)
#rename
FD<-long
# set up variable domain:
# "seqpos" -> position of flower in continuous sequence (across all branches)
seqpos<- aggregate(B$PosSeq, by=list(B$PlantID), max)
seqpos$Group.1<- NULL
seqpos<- as.matrix(seqpos)
seqpos<- as.vector(seqpos)
fit.1<- pfr(seed ~ lf.vd(banner, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no),family='ziP')
fit.1<- pfr(seed ~ lf.vd(banner, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no),family='ziP')
fit.1.1<- pfr(seed ~ lf.vd(banner, vd=unlist(flw.no), transform='standardized')
+ unlist(branch.no),family='ziP')
fit.1.2<- pfr(seed ~ lf.vd(banner, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no) + unlist(branch.no),family='ziP')
fit.1.3<- pfr(seed ~ lf.vd(banner, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no) + unlist(branch.no) + unlist(flw.no):unlist(branch.no),family='ziP')
AIC(fit.1, fit.1.1, fit.1.2, fit.1.3)
### --- 1. Adding Random Effects for Plants ---
fit_random_effects <- pfr(seed ~
lf.vd(Banner.functional, nbasis = 10) +
flw.no + bno$branch.no + flw.no:bno$branch.no + (1 | bno$PlantID),  # Random intercept for plants
method = "REML")
flw.no
fit.1<- pfr(seed ~ lf.vd(banner, vd=c(5, 10, 15, 20), transform='standardized')
+ unlist(flw.no),family='ziP')
summary(fit.1)
fit.1<- pfr(seed ~ lf.vd(banner, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no),family='ziP')
fit.1.1<- pfr(seed ~ lf.vd(banner, vd=unlist(flw.no), transform='standardized')
+ unlist(branch.no),family='ziP')
fit.1.2<- pfr(seed ~ lf.vd(banner, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no) + unlist(branch.no),family='ziP')
fit.1.3<- pfr(seed ~ lf.vd(banner, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no) + unlist(branch.no) + unlist(flw.no):unlist(branch.no),family='ziP')
AIC(fit.1, fit.1.1, fit.1.2, fit.1.3)
summary(fit.1)
summary(fit.1.1)
summary(fit.1.2)
summary(fit.1.3)
#output of results
fit<- coef(fit.1.2)   #Note: are these transformed?
#make absolute frstart date
fit$x<- fit$FL.arg * fit$FL.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$banner.arg, fit$value, type="l", main="relative")
fit$z1<- scale(fit$value)
fit$z2 <- ave(fit$value, fit$banner.vd, FUN=scale)
fit$z_LDH<- fit$value/fit$se
plot(fit$x, fit$z_LDH, type="l", main="absolute, Z-score")
plot(fit$x, fit$value, type="l", main="absolute")
head(fit)
#make absolute frstart date
fit$x<- fit$banner.arg * fit$banner.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$banner.arg, fit$value, type="l", main="relative")
####################################################################3
#
# Flower Length (FL)
fit.2.2<- pfr(seed ~ lf.vd(FL, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no) + unlist(branch.no),family='ziP')
fit.2.3<- pfr(seed ~ lf.vd(FL, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no) + unlist(branch.no) + unlist(flw.no):unlist(branch.no),family='ziP')
AIC(fit.2.2, fit.2.3)
summary(fit.2.2)
summary(fit.2.3)
#make absolute frstart date
fit<- coef(fit.2.3)
fit$x<- fit$FL.arg * fit$FL.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$FL.arg, fit$value, type="l", main="relative")
fit.2.2<- pfr(seed ~ lf.vd(FD, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no) + unlist(branch.no),family='ziP')
fit.2.3<- pfr(seed ~ lf.vd(FD, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no) + unlist(branch.no) + unlist(flw.no):unlist(branch.no),family='ziP')
AIC(fit.2.2, fit.2.3)
summary(fit.2.2)
summary(fit.2.3)
#make absolute frstart date
fit<- coef(fit.2.2)
fit$x<- fit$FD.arg * fit$FD.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$FD.arg, fit$value, type="l", main="relative")
fit.1<- pfr(seed ~ lf.vd(banner,  transform='standardized')
+ unlist(flw.no),family='ziP')
summary(fit.1)
fit.1.3<- pfr(seed ~ lf.vd(banner,  transform='standardized')
+ unlist(flw.no) + unlist(branch.no) + unlist(flw.no):unlist(branch.no),family='ziP')
summary(fit.1.3)
#output of results
fit<- coef(fit.1.3)   #Note: are these transformed?
#make absolute frstart date
fit$x<- fit$banner.arg * fit$banner.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$banner.arg, fit$value, type="l", main="relative")
head(fit, n=50)
fit.1.3<- pfr(seed ~ lf.vd(banner, vd=unlist(flw.no), transform='standardized')
+ unlist(flw.no) + unlist(branch.no) + unlist(flw.no):unlist(branch.no),family='ziP')
summary(fit.1.3)
#output of results
fit<- coef(fit.1.3)   #Note: are these transformed?
#make absolute frstart date
fit$x<- fit$banner.arg * fit$banner.vd
plot(fit$x, fit$value, type="l", main="absolute")
plot(fit$banner.arg, fit$value, type="l", main="relative")
### --- 2. Checking for Nonlinear Interactions ---
# Fit a generalized additive model (GAM) to allow for nonlinear interactions
fit_gam <- gam(seed.plant ~
### --- 2. Checking for Nonlinear Interactions ---
# Fit a generalized additive model (GAM) to allow for nonlinear interactions
fit_gam <- gam(seed.plant ~
s(flw.no, branch.no, bs = "tp",  # Smooth interaction between flower & branch number
method = "REML"))
### --- 2. Checking for Nonlinear Interactions ---
# Fit a generalized additive model (GAM) to allow for nonlinear interactions
fit_gam <- gam(seed.plant ~ s(flw.no:branch.no, bs = "tp",  # Smooth interaction between flower & branch number
method = "REML"))
