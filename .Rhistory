col= "goldenrod4")
mean(d)
median(d)
sd(d)
IQR(d, type = 2)
#NB: pathway is for MK's home computer
dat<- read.csv("C:/Users/mason/Dropbox/git/students/Oliver Noseworthy/Data/data2.csv")
head(dat)
# Load necessary packages
library(mgcv)
library(ggplot2)
library(dplyr)
head(dat)
# Fit B-splines using Generalized Additive Models (GAM)
model <- gam(tube.l ~ s(Pos, bs = "bs", k = 5) +
s(PlantID, bs = "re"),
data = dat, method = "REML")
# Fit B-splines using Generalized Additive Models (GAM)
model <- gam(tube.l ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re"),
data = dat, method = "REML")
# Generate prediction data
new_data <- expand.grid(FlowerPosition = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
PlantID = unique(data$plantID))
# Generate prediction data
new_data <- expand.grid(Position = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(data$plantID))
attach(dat)
# Generate prediction data
new_data <- expand.grid(Position = seq(min(Pos), max(Pos), length.out = 100),
plantID = unique(plantID))
new_data$PredictedTrait <- predict(model, new_data, exclude = "s(plantID)")
names(dat)
# Generate prediction data
new_data <- expand.grid(Position = seq(min(Pos), max(Pos), length.out = 100),
plantID = unique(array_plant))
new_data$PredictedTrait <- predict(model, new_data, exclude = "s(plantID)")
# Plot: Mean B-Spline Fit Across Multiple Individuals
ggplot(new_data, aes(x = FlowerPosition, y = PredictedTrait)) +
geom_line(size = 1, color = "blue") +
geom_point(data = data, aes(x = FlowerPosition, y = TraitValue), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation within Plants",
x = "Flower Position",
y = "Predicted Trait Value")
# Individual fits by plant
ggplot(data, aes(x = FlowerPosition, y = TraitValue, group = PlantID, color = as.factor(PlantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (B-Spline Fits)",
x = "Flower Position",
y = "Trait Value",
color = "Plant ID")
?expand.grid
names(dat)
# Fit B-splines using Generalized Additive Models (GAM) for tube length
model_tube <- gam(tube.l ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re") + s(Branch, bs = "re"),
data = dat, method = "REML")
# Fit B-splines for flower diameter
model_flw <- gam(flw.d ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re") + s(Branch, bs = "re"),
data = data, method = "REML")
# Fit B-splines for flower diameter
model_flw <- gam(flw.d ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re") + s(Branch, bs = "re"),
data = dat, method = "REML")
# Generate prediction data
new_data <- expand.grid(PosArray = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(dat$plantID),
Branch = unique(dat$Branch))
# Plot: Mean B-Spline Fit Across Multiple Individuals
ggplot(new_data, aes(x = FlowerPosition, y = PredictedTrait)) +
geom_line(size = 1, color = "blue") +
geom_point(data = data, aes(x = FlowerPosition, y = TraitValue), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation within Plants",
x = "Flower Position",
y = "Predicted Trait Value")
# Individual fits by plant
ggplot(data, aes(x = FlowerPosition, y = TraitValue, group = PlantID, color = as.factor(PlantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (B-Spline Fits)",
x = "Flower Position",
y = "Trait Value",
color = "Plant ID")
head(new_data)
# Generate prediction data
new_data <- expand.grid(Pos = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(dat$plantID),
Branch = unique(dat$Branch))
# Plot: Mean B-Spline Fit Across Multiple Individuals
ggplot(new_data, aes(x = Flower Position, y = PredictedTrait)) +
# Plot: Mean B-Spline Fit Across Multiple Individuals
ggplot(new_data, aes(x = Pos, y = PredictedTrait)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = FlowerPosition, y = TraitValue), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation within Plants",
x = "Flower Position",
y = "Predicted Trait Value")
# Plot: Mean B-Spline Fit Across Multiple Individuals
ggplot(new_data, aes(x = Pos, y = PosArray)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = FlowerPosition, y = TraitValue), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation within Plants",
x = "Flower Position",
y = "Predicted Trait Value")
new_data$PredictedTube <- predict(model_tube, new_data, exclude = c("s(plantID)", "s(Branch)"))
new_data$PredictedFlw <- predict(model_flw, new_data, exclude = c("s(plantID)", "s(Branch)"))
# Plot: Mean B-Spline Fit for Tube Length
p1 <- ggplot(new_data, aes(x = PosArray, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = data, aes(x = PosArray, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
p2 <- ggplot(new_data, aes(x = PosArray, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
geom_point(data = data, aes(x = PosArray, y = flw.d), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Individual fits by plant for tube length
p3 <- ggplot(data, aes(x = PosArray, y = tube.l, group = plantID, color = as.factor(plantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (Tube Length)",
x = "Flower Position in Array",
y = "Tube Length",
color = "Plant ID")
# Print plots
print(p1)
# Plot: Mean B-Spline Fit for Tube Length
ggplot(new_data, aes(x = PosArray, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = data, aes(x = PosArray, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Tube Length
ggplot(new_data, aes(x = PosArray, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = PosArray, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Tube Length
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = Pos, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
geom_point(data = data, aes(x = Pos, y = flw.d), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
geom_point(data = dat, aes(x = Pos, y = flw.d), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Individual fits by plant for tube length
ggplot(data, aes(x = Pos, y = tube.l, group = plantID, color = as.factor(plantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (Tube Length)",
x = "Flower Position in Array",
y = "Tube Length",
color = "Plant ID")
# Individual fits by plant for tube length
ggplot(dat, aes(x = Pos, y = tube.l, group = plantID, color = as.factor(plantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (Tube Length)",
x = "Flower Position in Array",
y = "Tube Length",
color = "Plant ID")
#NB: pathway is for MK's home computer
dat<- read.csv("C:/Users/mason/Dropbox/git/students/Oliver Noseworthy/Data/data2.csv")
head(dat)
attach(dat)
# Load necessary packages
library(mgcv)
library(ggplot2)
library(dplyr)
# Fit B-splines using Generalized Additive Models (GAM) for tube length
model_tube <- gam(tube.l ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re") + s(Branch, bs = "re"),
data = dat, method = "REML")
# Fit B-splines for flower diameter
model_flw <- gam(flw.d ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re") + s(Branch, bs = "re"),
data = dat, method = "REML")
# Generate prediction data
new_data <- expand.grid(Pos = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(dat$plantID),
Branch = unique(dat$Branch))
new_data$PredictedTube <- predict(model_tube, new_data, exclude = c("s(plantID)", "s(Branch)"))
new_data$PredictedFlw <- predict(model_flw, new_data, exclude = c("s(plantID)", "s(Branch)"))
# Plot: Mean B-Spline Fit for Tube Length
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = Pos, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
geom_point(data = dat, aes(x = Pos, y = flw.d), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Individual fits by plant for tube length
ggplot(dat, aes(x = Pos, y = tube.l, group = plantID, color = as.factor(plantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (Tube Length)",
x = "Flower Position in Array",
y = "Tube Length",
color = "Plant ID")
# Plot: Mean B-Spline Fit for Tube Length
p1 <- ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = PosArray, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 8), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 20), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 3), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 4), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = knots), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
PredictedTube
head(new_data)
summary(model_tube)
# Fit B-splines using Generalized Additive Models (GAM) for tube length
model_tube <- gam(tube.l ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re"),
data = dat, method = "REML")
summary(model_tube)
# Fit B-splines for flower diameter
model_flw <- gam(flw.d ~ s(Pos, bs = "bs", k = 5) +
s(plantID, bs = "re"),
data = dat, method = "REML")
# Generate prediction data
new_data <- expand.grid(Pos = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(dat$plantID),
Branch = unique(dat$Branch))
# Generate prediction data
new_data <- expand.grid(Pos = seq(min(dat$Pos), max(dat$Pos), length.out = 100),
plantID = unique(dat$plantID))
new_data$PredictedTube <- predict(model_tube, new_data, exclude = c("s(plantID)", "s(Branch)"))
new_data$PredictedFlw <- predict(model_flw, new_data, exclude = c("s(plantID)", "s(Branch)"))
# Plot: Mean B-Spline Fit for Tube Length
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_line(size = 1, color = "blue") +
geom_point(data = dat, aes(x = Pos, y = tube.l), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Tube Length",
x = "Flower Position in Array",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
geom_point(data = dat, aes(x = Pos, y = flw.d), alpha = 0.3) +
theme_minimal() +
labs(title = "Systematic Floral Variation: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
# Individual fits by plant for tube length
ggplot(dat, aes(x = Pos, y = tube.l, group = plantID, color = as.factor(plantID))) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Within-Plant Floral Variation (Tube Length)",
x = "Flower Position in Array",
y = "Tube Length",
color = "Plant ID")
ggplot(new_data, aes(x = Pos, y = PredictedTube)) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "bs", k = 5), se = FALSE) +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Tube Length",
x = "Flower Position",
y = "Predicted Tube Length")
# Plot: Mean B-Spline Fit for Flower Diameter
ggplot(new_data, aes(x = Pos, y = PredictedFlw)) +
geom_line(size = 1, color = "red") +
theme_minimal() +
labs(title = "Mean B-Spline Fit: Flower Diameter",
x = "Flower Position in Array",
y = "Predicted Flower Diameter")
#home computer
setwd("C:/Users/mason/Dropbox/git/Vicia/")
# Load required packages
library(refund)
library(dplyr)
library(tidyr)
library(tibble)
# Read data
dat <- read.csv("vicia_final_data.csv")
# flowering graphs etc.
# Calculate number of flowers opening per day
library(dplyr)
library(ggplot2)
flowers_per_day <- dat %>%
group_by(flw_date) %>%
summarise(n_flowers = n())
# View the result
print(flowers_per_day)
plot(flowers_per_day$flw_date, flowers_per_day$n_flowers)
####################################################################
# mean +/- SE per day
# First, count flowers opened per PlantID per day
flowers_by_plant_day <- dat %>%
group_by(PlantID, flw_date) %>%
summarise(n_flowers = n(), .groups = "drop")
# Now, for each day, calculate mean and SE across plants
summary_flowers <- flowers_by_plant_day %>%
group_by(flw_date) %>%
summarise(
mean_n_flowers = mean(n_flowers),
se_n_flowers = sd(n_flowers) / sqrt(n())
)
# View the summarized data
print(summary_flowers)
# Plot mean ± SE over days
ggplot(summary_flowers, aes(x = flw_date, y = mean_n_flowers)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean_n_flowers - se_n_flowers, ymax = mean_n_flowers + se_n_flowers), width = 0.2) +
labs(x = "Day of Flowering Season", y = "Mean Number of New Flowers per Plant ± SE") +
theme_minimal()
##############################################################
# horizontal bar plot
# Find first and last day each plant had new flowers
flowering_period <- dat %>%
group_by(PlantID) %>%
summarise(
first_day = min(flw_date, na.rm = TRUE),
last_day = max(flw_date, na.rm = TRUE),
.groups = "drop"
)
# Function to calculate number of overlapping plants
calculate_overlap <- function(id, first, last, all_periods) {
overlaps <- all_periods %>%
filter(PlantID != id) %>%  # exclude self
filter(!(last < first_day | first > last_day))  # flowering periods overlap
return(nrow(overlaps))
}
# Apply function for each plant
flowering_period$coflowering_plants <- mapply(
calculate_overlap,
flowering_period$PlantID,
flowering_period$first_day,
flowering_period$last_day,
MoreArgs = list(all_periods = flowering_period)
)
# View the flowering periods
print(flowering_period)
# First reshape PlantID for ordered plotting
flowering_period <- flowering_period %>%
mutate(PlantID = factor(PlantID, levels = PlantID[order(first_day)]))
# Now plot
ggplot(flowering_period) +
geom_segment(aes(x = first_day, xend = last_day, y = PlantID, yend = PlantID),
size = 2, color = "steelblue") +
geom_line(aes(x = (first_day + last_day)/2, y = coflowering_plants),
color = "firebrick", size = 1) +
geom_point(aes(x = (first_day + last_day)/2, y = coflowering_plants),
color = "firebrick", size = 2) +
scale_y_discrete(name = "Plant ID") +
scale_x_continuous(
name = "Day of Flowering Season",
sec.axis = sec_axis(~ ., name = "Number of Co-flowering Plants")
) +
theme_minimal() +
labs(title = "Flowering Periods and Co-flowering Dynamics")
library(dplyr)
library(tidyr)
library(ggplot2)
# Create flowering periods
flowering_period <- dat %>%
group_by(PlantID) %>%
summarise(
first_day = min(flw_date, na.rm = TRUE),
last_day = max(flw_date, na.rm = TRUE),
.groups = "drop"
)
# Expand to 1 row per plant per day
flowering_days <- flowering_period %>%
rowwise() %>%
mutate(day_seq = list(seq(first_day, last_day))) %>%
unnest(cols = c(day_seq))
# For each day and plant, count how many other plants were flowering
coflowering_by_day <- flowering_days %>%
group_by(day_seq) %>%
mutate(coflowering = n() - 1) %>%  # subtract 1 to exclude self
ungroup()
# Calculate average co-flowering across days for each plant
plant_avg_coflowering <- coflowering_by_day %>%
group_by(PlantID) %>%
summarise(avg_coflowering = mean(coflowering), .groups = "drop")
# Merge average coflowering into flowering_period for bar colors
flowering_period <- flowering_period %>%
left_join(plant_avg_coflowering, by = "PlantID")
# Set threshold for "high" coflowering
high_coflowering_threshold <- quantile(flowering_period$avg_coflowering, 0.9)  # top 10%
flowering_period <- flowering_period %>%
mutate(highlight = avg_coflowering >= high_coflowering_threshold)
# Now plot
ggplot() +
# Flowering period bars colored by avg coflowering
geom_segment(data = flowering_period,
aes(x = first_day, xend = last_day, y = reorder(PlantID, first_day), yend = PlantID,
color = avg_coflowering),
size = 3) +
# Overlapping curve (per plant across days)
geom_line(data = coflowering_by_day,
aes(x = day_seq, y = coflowering, group = PlantID, color = PlantID),
inherit.aes = FALSE, alpha = 0.6, size=1.5) +
# Highlight special plants
geom_point(data = flowering_period %>% filter(highlight),
aes(x = (first_day + last_day)/2, y = PlantID),
shape = 21, fill = "black", color = "black", size = 4, stroke = 1.5) +
scale_color_viridis_c(name = "Avg Co-flowering\nPlants", option = "plasma") +
scale_x_continuous(
name = "Day of Flowering Season",
sec.axis = sec_axis(~ ., name = "Number of Co-flowering Plants (per day)")
) +
scale_y_discrete(name = "Plant ID") +
theme_minimal() +
labs(title = "Flowering Periods and Co-flowering Dynamics by Plant") +
theme(
axis.text.y = element_text(size = 6),
legend.position = "bottom"
)
